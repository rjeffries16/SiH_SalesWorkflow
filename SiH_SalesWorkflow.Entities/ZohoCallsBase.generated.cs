
/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : Thursday, May 12, 2016
	Important: Do not modify this file. Edit the file ZohoCalls.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using SiH_SalesWorkflow.Entities.Validation;
#endregion

namespace SiH_SalesWorkflow.Entities
{
	///<summary>
	/// An object representation of the 'ZohoCalls' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ZohoCallsBase : EntityBase, IZohoCalls, IEntityId<ZohoCallsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ZohoCallsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ZohoCallsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ZohoCallsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ZohoCalls> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ZohoCallsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ZohoCallsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ZohoCallsBase"/> instance.
		///</summary>
		public ZohoCallsBase()
		{
			this.entityData = new ZohoCallsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ZohoCallsBase"/> instance.
		///</summary>
		///<param name="_accountid"></param>
		///<param name="_billable"></param>
		///<param name="_callDuration"></param>
		///<param name="_safeNameCallDurationInMinutes"></param>
		///<param name="_safeNameCallDurationInSeconds"></param>
		///<param name="_callOwner"></param>
		///<param name="_callOwnerId"></param>
		///<param name="_callPurpose"></param>
		///<param name="_callResult"></param>
		///<param name="_callStartTime"></param>
		///<param name="_callType"></param>
		///<param name="_contactId"></param>
		///<param name="_createdBy"></param>
		///<param name="_createdTime"></param>
		///<param name="_leadid"></param>
		///<param name="_modifiedTime"></param>
		///<param name="_potentialid"></param>
		///<param name="_relatedTo"></param>
		///<param name="_semodule"></param>
		///<param name="_subject"></param>
		///<param name="_taskid"></param>
		///<param name="_whoIdId"></param>
		public ZohoCallsBase(System.String _accountid, System.String _billable, System.String _callDuration, 
			System.Double? _safeNameCallDurationInMinutes, System.Double? _safeNameCallDurationInSeconds, System.String _callOwner, 
			System.String _callOwnerId, System.String _callPurpose, System.String _callResult, System.DateTime? _callStartTime, 
			System.String _callType, System.String _contactId, System.String _createdBy, System.DateTime? _createdTime, 
			System.String _leadid, System.DateTime? _modifiedTime, System.String _potentialid, System.String _relatedTo, 
			System.String _semodule, System.String _subject, System.String _taskid, System.String _whoIdId)
		{
			this.entityData = new ZohoCallsEntityData();
			this.backupData = null;

			this.Accountid = _accountid;
			this.Billable = _billable;
			this.CallDuration = _callDuration;
			this.SafeNameCallDurationInMinutes = _safeNameCallDurationInMinutes;
			this.SafeNameCallDurationInSeconds = _safeNameCallDurationInSeconds;
			this.CallOwner = _callOwner;
			this.CallOwnerId = _callOwnerId;
			this.CallPurpose = _callPurpose;
			this.CallResult = _callResult;
			this.CallStartTime = _callStartTime;
			this.CallType = _callType;
			this.ContactId = _contactId;
			this.CreatedBy = _createdBy;
			this.CreatedTime = _createdTime;
			this.Leadid = _leadid;
			this.ModifiedTime = _modifiedTime;
			this.Potentialid = _potentialid;
			this.RelatedTo = _relatedTo;
			this.Semodule = _semodule;
			this.Subject = _subject;
			this.Taskid = _taskid;
			this.WhoIdId = _whoIdId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ZohoCalls"/> instance.
		///</summary>
		///<param name="_accountid"></param>
		///<param name="_billable"></param>
		///<param name="_callDuration"></param>
		///<param name="_safeNameCallDurationInMinutes"></param>
		///<param name="_safeNameCallDurationInSeconds"></param>
		///<param name="_callOwner"></param>
		///<param name="_callOwnerId"></param>
		///<param name="_callPurpose"></param>
		///<param name="_callResult"></param>
		///<param name="_callStartTime"></param>
		///<param name="_callType"></param>
		///<param name="_contactId"></param>
		///<param name="_createdBy"></param>
		///<param name="_createdTime"></param>
		///<param name="_leadid"></param>
		///<param name="_modifiedTime"></param>
		///<param name="_potentialid"></param>
		///<param name="_relatedTo"></param>
		///<param name="_semodule"></param>
		///<param name="_subject"></param>
		///<param name="_taskid"></param>
		///<param name="_whoIdId"></param>
		public static ZohoCalls CreateZohoCalls(System.String _accountid, System.String _billable, System.String _callDuration, 
			System.Double? _safeNameCallDurationInMinutes, System.Double? _safeNameCallDurationInSeconds, System.String _callOwner, 
			System.String _callOwnerId, System.String _callPurpose, System.String _callResult, System.DateTime? _callStartTime, 
			System.String _callType, System.String _contactId, System.String _createdBy, System.DateTime? _createdTime, 
			System.String _leadid, System.DateTime? _modifiedTime, System.String _potentialid, System.String _relatedTo, 
			System.String _semodule, System.String _subject, System.String _taskid, System.String _whoIdId)
		{
			ZohoCalls newZohoCalls = new ZohoCalls();
			newZohoCalls.Accountid = _accountid;
			newZohoCalls.Billable = _billable;
			newZohoCalls.CallDuration = _callDuration;
			newZohoCalls.SafeNameCallDurationInMinutes = _safeNameCallDurationInMinutes;
			newZohoCalls.SafeNameCallDurationInSeconds = _safeNameCallDurationInSeconds;
			newZohoCalls.CallOwner = _callOwner;
			newZohoCalls.CallOwnerId = _callOwnerId;
			newZohoCalls.CallPurpose = _callPurpose;
			newZohoCalls.CallResult = _callResult;
			newZohoCalls.CallStartTime = _callStartTime;
			newZohoCalls.CallType = _callType;
			newZohoCalls.ContactId = _contactId;
			newZohoCalls.CreatedBy = _createdBy;
			newZohoCalls.CreatedTime = _createdTime;
			newZohoCalls.Leadid = _leadid;
			newZohoCalls.ModifiedTime = _modifiedTime;
			newZohoCalls.Potentialid = _potentialid;
			newZohoCalls.RelatedTo = _relatedTo;
			newZohoCalls.Semodule = _semodule;
			newZohoCalls.Subject = _subject;
			newZohoCalls.Taskid = _taskid;
			newZohoCalls.WhoIdId = _whoIdId;
			return newZohoCalls;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Accountid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Accountid
		{
			get
			{
				return this.entityData.Accountid; 
			}
			
			set
			{
				if (this.entityData.Accountid == value)
					return;
				
                OnPropertyChanging("Accountid");                    
				OnColumnChanging(ZohoCallsColumn.Accountid, this.entityData.Accountid);
				this.entityData.Accountid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.Accountid, this.entityData.Accountid);
				OnPropertyChanged("Accountid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Billable property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Billable
		{
			get
			{
				return this.entityData.Billable; 
			}
			
			set
			{
				if (this.entityData.Billable == value)
					return;
				
                OnPropertyChanging("Billable");                    
				OnColumnChanging(ZohoCallsColumn.Billable, this.entityData.Billable);
				this.entityData.Billable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.Billable, this.entityData.Billable);
				OnPropertyChanged("Billable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallDuration property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CallDuration
		{
			get
			{
				return this.entityData.CallDuration; 
			}
			
			set
			{
				if (this.entityData.CallDuration == value)
					return;
				
                OnPropertyChanging("CallDuration");                    
				OnColumnChanging(ZohoCallsColumn.CallDuration, this.entityData.CallDuration);
				this.entityData.CallDuration = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CallDuration, this.entityData.CallDuration);
				OnPropertyChanged("CallDuration");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeNameCallDurationInMinutes property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? SafeNameCallDurationInMinutes
		{
			get
			{
				return this.entityData.SafeNameCallDurationInMinutes; 
			}
			
			set
			{
				if (this.entityData.SafeNameCallDurationInMinutes == value)
					return;
				
                OnPropertyChanging("SafeNameCallDurationInMinutes");                    
				OnColumnChanging(ZohoCallsColumn.SafeNameCallDurationInMinutes, this.entityData.SafeNameCallDurationInMinutes);
				this.entityData.SafeNameCallDurationInMinutes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.SafeNameCallDurationInMinutes, this.entityData.SafeNameCallDurationInMinutes);
				OnPropertyChanged("SafeNameCallDurationInMinutes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SafeNameCallDurationInSeconds property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? SafeNameCallDurationInSeconds
		{
			get
			{
				return this.entityData.SafeNameCallDurationInSeconds; 
			}
			
			set
			{
				if (this.entityData.SafeNameCallDurationInSeconds == value)
					return;
				
                OnPropertyChanging("SafeNameCallDurationInSeconds");                    
				OnColumnChanging(ZohoCallsColumn.SafeNameCallDurationInSeconds, this.entityData.SafeNameCallDurationInSeconds);
				this.entityData.SafeNameCallDurationInSeconds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.SafeNameCallDurationInSeconds, this.entityData.SafeNameCallDurationInSeconds);
				OnPropertyChanged("SafeNameCallDurationInSeconds");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallOwner property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CallOwner
		{
			get
			{
				return this.entityData.CallOwner; 
			}
			
			set
			{
				if (this.entityData.CallOwner == value)
					return;
				
                OnPropertyChanging("CallOwner");                    
				OnColumnChanging(ZohoCallsColumn.CallOwner, this.entityData.CallOwner);
				this.entityData.CallOwner = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CallOwner, this.entityData.CallOwner);
				OnPropertyChanged("CallOwner");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallOwnerId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CallOwnerId
		{
			get
			{
				return this.entityData.CallOwnerId; 
			}
			
			set
			{
				if (this.entityData.CallOwnerId == value)
					return;
				
                OnPropertyChanging("CallOwnerId");                    
				OnColumnChanging(ZohoCallsColumn.CallOwnerId, this.entityData.CallOwnerId);
				this.entityData.CallOwnerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CallOwnerId, this.entityData.CallOwnerId);
				OnPropertyChanged("CallOwnerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallPurpose property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CallPurpose
		{
			get
			{
				return this.entityData.CallPurpose; 
			}
			
			set
			{
				if (this.entityData.CallPurpose == value)
					return;
				
                OnPropertyChanging("CallPurpose");                    
				OnColumnChanging(ZohoCallsColumn.CallPurpose, this.entityData.CallPurpose);
				this.entityData.CallPurpose = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CallPurpose, this.entityData.CallPurpose);
				OnPropertyChanged("CallPurpose");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallResult property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CallResult
		{
			get
			{
				return this.entityData.CallResult; 
			}
			
			set
			{
				if (this.entityData.CallResult == value)
					return;
				
                OnPropertyChanging("CallResult");                    
				OnColumnChanging(ZohoCallsColumn.CallResult, this.entityData.CallResult);
				this.entityData.CallResult = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CallResult, this.entityData.CallResult);
				OnPropertyChanged("CallResult");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallStartTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CallStartTime
		{
			get
			{
				return this.entityData.CallStartTime; 
			}
			
			set
			{
				if (this.entityData.CallStartTime == value)
					return;
				
                OnPropertyChanging("CallStartTime");                    
				OnColumnChanging(ZohoCallsColumn.CallStartTime, this.entityData.CallStartTime);
				this.entityData.CallStartTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CallStartTime, this.entityData.CallStartTime);
				OnPropertyChanged("CallStartTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallType property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CallType
		{
			get
			{
				return this.entityData.CallType; 
			}
			
			set
			{
				if (this.entityData.CallType == value)
					return;
				
                OnPropertyChanging("CallType");                    
				OnColumnChanging(ZohoCallsColumn.CallType, this.entityData.CallType);
				this.entityData.CallType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CallType, this.entityData.CallType);
				OnPropertyChanged("CallType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ContactId
		{
			get
			{
				return this.entityData.ContactId; 
			}
			
			set
			{
				if (this.entityData.ContactId == value)
					return;
				
                OnPropertyChanging("ContactId");                    
				OnColumnChanging(ZohoCallsColumn.ContactId, this.entityData.ContactId);
				this.entityData.ContactId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.ContactId, this.entityData.ContactId);
				OnPropertyChanged("ContactId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedBy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String CreatedBy
		{
			get
			{
				return this.entityData.CreatedBy; 
			}
			
			set
			{
				if (this.entityData.CreatedBy == value)
					return;
				
                OnPropertyChanging("CreatedBy");                    
				OnColumnChanging(ZohoCallsColumn.CreatedBy, this.entityData.CreatedBy);
				this.entityData.CreatedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CreatedBy, this.entityData.CreatedBy);
				OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedTime
		{
			get
			{
				return this.entityData.CreatedTime; 
			}
			
			set
			{
				if (this.entityData.CreatedTime == value)
					return;
				
                OnPropertyChanging("CreatedTime");                    
				OnColumnChanging(ZohoCallsColumn.CreatedTime, this.entityData.CreatedTime);
				this.entityData.CreatedTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CreatedTime, this.entityData.CreatedTime);
				OnPropertyChanged("CreatedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Leadid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Leadid
		{
			get
			{
				return this.entityData.Leadid; 
			}
			
			set
			{
				if (this.entityData.Leadid == value)
					return;
				
                OnPropertyChanging("Leadid");                    
				OnColumnChanging(ZohoCallsColumn.Leadid, this.entityData.Leadid);
				this.entityData.Leadid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.Leadid, this.entityData.Leadid);
				OnPropertyChanged("Leadid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null it is up to the developer to check using the HasValue property
		/// and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ModifiedTime
		{
			get
			{
				return this.entityData.ModifiedTime; 
			}
			
			set
			{
				if (this.entityData.ModifiedTime == value)
					return;
				
                OnPropertyChanging("ModifiedTime");                    
				OnColumnChanging(ZohoCallsColumn.ModifiedTime, this.entityData.ModifiedTime);
				this.entityData.ModifiedTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.ModifiedTime, this.entityData.ModifiedTime);
				OnPropertyChanged("ModifiedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Potentialid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Potentialid
		{
			get
			{
				return this.entityData.Potentialid; 
			}
			
			set
			{
				if (this.entityData.Potentialid == value)
					return;
				
                OnPropertyChanging("Potentialid");                    
				OnColumnChanging(ZohoCallsColumn.Potentialid, this.entityData.Potentialid);
				this.entityData.Potentialid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.Potentialid, this.entityData.Potentialid);
				OnPropertyChanged("Potentialid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RelatedTo property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String RelatedTo
		{
			get
			{
				return this.entityData.RelatedTo; 
			}
			
			set
			{
				if (this.entityData.RelatedTo == value)
					return;
				
                OnPropertyChanging("RelatedTo");                    
				OnColumnChanging(ZohoCallsColumn.RelatedTo, this.entityData.RelatedTo);
				this.entityData.RelatedTo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.RelatedTo, this.entityData.RelatedTo);
				OnPropertyChanged("RelatedTo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Semodule property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Semodule
		{
			get
			{
				return this.entityData.Semodule; 
			}
			
			set
			{
				if (this.entityData.Semodule == value)
					return;
				
                OnPropertyChanging("Semodule");                    
				OnColumnChanging(ZohoCallsColumn.Semodule, this.entityData.Semodule);
				this.entityData.Semodule = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.Semodule, this.entityData.Semodule);
				OnPropertyChanged("Semodule");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Subject property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Subject
		{
			get
			{
				return this.entityData.Subject; 
			}
			
			set
			{
				if (this.entityData.Subject == value)
					return;
				
                OnPropertyChanging("Subject");                    
				OnColumnChanging(ZohoCallsColumn.Subject, this.entityData.Subject);
				this.entityData.Subject = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.Subject, this.entityData.Subject);
				OnPropertyChanged("Subject");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Taskid property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Taskid
		{
			get
			{
				return this.entityData.Taskid; 
			}
			
			set
			{
				if (this.entityData.Taskid == value)
					return;
				
                OnPropertyChanging("Taskid");                    
				OnColumnChanging(ZohoCallsColumn.Taskid, this.entityData.Taskid);
				this.entityData.Taskid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.Taskid, this.entityData.Taskid);
				OnPropertyChanged("Taskid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WhoIdId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String WhoIdId
		{
			get
			{
				return this.entityData.WhoIdId; 
			}
			
			set
			{
				if (this.entityData.WhoIdId == value)
					return;
				
                OnPropertyChanging("WhoIdId");                    
				OnColumnChanging(ZohoCallsColumn.WhoIdId, this.entityData.WhoIdId);
				this.entityData.WhoIdId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.WhoIdId, this.entityData.WhoIdId);
				OnPropertyChanged("WhoIdId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallPk property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 CallPk
		{
			get
			{
				return this.entityData.CallPk; 
			}
			
			set
			{
				if (this.entityData.CallPk == value)
					return;
				
                OnPropertyChanging("CallPk");                    
				OnColumnChanging(ZohoCallsColumn.CallPk, this.entityData.CallPk);
				this.entityData.CallPk = value;
				this.EntityId.CallPk = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ZohoCallsColumn.CallPk, this.entityData.CallPk);
				OnPropertyChanged("CallPk");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Accountid", "Accountid", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Billable", "Billable", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CallDuration", "Call Duration", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CallOwner", "Call Owner", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CallOwnerId", "Call Owner Id", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CallPurpose", "Call Purpose", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CallResult", "Call Result", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CallType", "Call Type", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ContactId", "Contact Id", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreatedBy", "Created By", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Leadid", "Leadid", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Potentialid", "Potentialid", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RelatedTo", "Related To", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Semodule", "Semodule", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Subject", "Subject", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Taskid", "Taskid", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("WhoIdId", "Who Id Id", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ZohoCalls"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ACCOUNTID", "Billable", "Call Duration", "Call Duration (in minutes)", "Call Duration (in seconds)", "Call Owner", "Call Owner Id", "Call Purpose", "Call Result", "Call Start Time", "Call Type", "ContactID", "CreatedBy", "Created Time", "LEADID", "Modified Time", "POTENTIALID", "RELATED To", "SEMODULE", "Subject", "TASKID", "Who Id Id", "CallPK"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ZohoCallsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ZohoCalls) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ZohoCalls>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ZohoCalls);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ZohoCalls Entity 
		///</summary>
		protected virtual ZohoCalls Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ZohoCalls copy = new ZohoCalls();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Accountid = this.Accountid;
				copy.Billable = this.Billable;
				copy.CallDuration = this.CallDuration;
				copy.SafeNameCallDurationInMinutes = this.SafeNameCallDurationInMinutes;
				copy.SafeNameCallDurationInSeconds = this.SafeNameCallDurationInSeconds;
				copy.CallOwner = this.CallOwner;
				copy.CallOwnerId = this.CallOwnerId;
				copy.CallPurpose = this.CallPurpose;
				copy.CallResult = this.CallResult;
				copy.CallStartTime = this.CallStartTime;
				copy.CallType = this.CallType;
				copy.ContactId = this.ContactId;
				copy.CreatedBy = this.CreatedBy;
				copy.CreatedTime = this.CreatedTime;
				copy.Leadid = this.Leadid;
				copy.ModifiedTime = this.ModifiedTime;
				copy.Potentialid = this.Potentialid;
				copy.RelatedTo = this.RelatedTo;
				copy.Semodule = this.Semodule;
				copy.Subject = this.Subject;
				copy.Taskid = this.Taskid;
				copy.WhoIdId = this.WhoIdId;
				copy.CallPk = this.CallPk;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ZohoCalls Entity 
		///</summary>
		public virtual ZohoCalls Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ZohoCalls Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ZohoCalls DeepCopy()
		{
			return EntityHelper.Clone<ZohoCalls>(this as ZohoCalls);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ZohoCallsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ZohoCallsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ZohoCallsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ZohoCallsColumn column)
		{
			switch(column)
			{
					case ZohoCallsColumn.Accountid:
					return entityData.Accountid != _originalData.Accountid;
					case ZohoCallsColumn.Billable:
					return entityData.Billable != _originalData.Billable;
					case ZohoCallsColumn.CallDuration:
					return entityData.CallDuration != _originalData.CallDuration;
					case ZohoCallsColumn.SafeNameCallDurationInMinutes:
					return entityData.SafeNameCallDurationInMinutes != _originalData.SafeNameCallDurationInMinutes;
					case ZohoCallsColumn.SafeNameCallDurationInSeconds:
					return entityData.SafeNameCallDurationInSeconds != _originalData.SafeNameCallDurationInSeconds;
					case ZohoCallsColumn.CallOwner:
					return entityData.CallOwner != _originalData.CallOwner;
					case ZohoCallsColumn.CallOwnerId:
					return entityData.CallOwnerId != _originalData.CallOwnerId;
					case ZohoCallsColumn.CallPurpose:
					return entityData.CallPurpose != _originalData.CallPurpose;
					case ZohoCallsColumn.CallResult:
					return entityData.CallResult != _originalData.CallResult;
					case ZohoCallsColumn.CallStartTime:
					return entityData.CallStartTime != _originalData.CallStartTime;
					case ZohoCallsColumn.CallType:
					return entityData.CallType != _originalData.CallType;
					case ZohoCallsColumn.ContactId:
					return entityData.ContactId != _originalData.ContactId;
					case ZohoCallsColumn.CreatedBy:
					return entityData.CreatedBy != _originalData.CreatedBy;
					case ZohoCallsColumn.CreatedTime:
					return entityData.CreatedTime != _originalData.CreatedTime;
					case ZohoCallsColumn.Leadid:
					return entityData.Leadid != _originalData.Leadid;
					case ZohoCallsColumn.ModifiedTime:
					return entityData.ModifiedTime != _originalData.ModifiedTime;
					case ZohoCallsColumn.Potentialid:
					return entityData.Potentialid != _originalData.Potentialid;
					case ZohoCallsColumn.RelatedTo:
					return entityData.RelatedTo != _originalData.RelatedTo;
					case ZohoCallsColumn.Semodule:
					return entityData.Semodule != _originalData.Semodule;
					case ZohoCallsColumn.Subject:
					return entityData.Subject != _originalData.Subject;
					case ZohoCallsColumn.Taskid:
					return entityData.Taskid != _originalData.Taskid;
					case ZohoCallsColumn.WhoIdId:
					return entityData.WhoIdId != _originalData.WhoIdId;
					case ZohoCallsColumn.CallPk:
					return entityData.CallPk != _originalData.CallPk;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ZohoCallsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Accountid != _originalData.Accountid;
			result = result || entityData.Billable != _originalData.Billable;
			result = result || entityData.CallDuration != _originalData.CallDuration;
			result = result || entityData.SafeNameCallDurationInMinutes != _originalData.SafeNameCallDurationInMinutes;
			result = result || entityData.SafeNameCallDurationInSeconds != _originalData.SafeNameCallDurationInSeconds;
			result = result || entityData.CallOwner != _originalData.CallOwner;
			result = result || entityData.CallOwnerId != _originalData.CallOwnerId;
			result = result || entityData.CallPurpose != _originalData.CallPurpose;
			result = result || entityData.CallResult != _originalData.CallResult;
			result = result || entityData.CallStartTime != _originalData.CallStartTime;
			result = result || entityData.CallType != _originalData.CallType;
			result = result || entityData.ContactId != _originalData.ContactId;
			result = result || entityData.CreatedBy != _originalData.CreatedBy;
			result = result || entityData.CreatedTime != _originalData.CreatedTime;
			result = result || entityData.Leadid != _originalData.Leadid;
			result = result || entityData.ModifiedTime != _originalData.ModifiedTime;
			result = result || entityData.Potentialid != _originalData.Potentialid;
			result = result || entityData.RelatedTo != _originalData.RelatedTo;
			result = result || entityData.Semodule != _originalData.Semodule;
			result = result || entityData.Subject != _originalData.Subject;
			result = result || entityData.Taskid != _originalData.Taskid;
			result = result || entityData.WhoIdId != _originalData.WhoIdId;
			result = result || entityData.CallPk != _originalData.CallPk;
			return result;
		}	
		
		///<summary>
		///  Returns a ZohoCalls Entity with the original data.
		///</summary>
		public ZohoCalls GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateZohoCalls(
				_originalData.Accountid,
				_originalData.Billable,
				_originalData.CallDuration,
				_originalData.SafeNameCallDurationInMinutes,
				_originalData.SafeNameCallDurationInSeconds,
				_originalData.CallOwner,
				_originalData.CallOwnerId,
				_originalData.CallPurpose,
				_originalData.CallResult,
				_originalData.CallStartTime,
				_originalData.CallType,
				_originalData.ContactId,
				_originalData.CreatedBy,
				_originalData.CreatedTime,
				_originalData.Leadid,
				_originalData.ModifiedTime,
				_originalData.Potentialid,
				_originalData.RelatedTo,
				_originalData.Semodule,
				_originalData.Subject,
				_originalData.Taskid,
				_originalData.WhoIdId
				);
				
			return (ZohoCalls)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ZohoCallsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ZohoCallsBase)
				return ValueEquals(this, (ZohoCallsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ZohoCallsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return ((this.Accountid == null) ? string.Empty : this.Accountid.ToString()).GetHashCode() ^ 
					((this.Billable == null) ? string.Empty : this.Billable.ToString()).GetHashCode() ^ 
					((this.CallDuration == null) ? string.Empty : this.CallDuration.ToString()).GetHashCode() ^ 
					((this.SafeNameCallDurationInMinutes == null) ? string.Empty : this.SafeNameCallDurationInMinutes.ToString()).GetHashCode() ^ 
					((this.SafeNameCallDurationInSeconds == null) ? string.Empty : this.SafeNameCallDurationInSeconds.ToString()).GetHashCode() ^ 
					((this.CallOwner == null) ? string.Empty : this.CallOwner.ToString()).GetHashCode() ^ 
					((this.CallOwnerId == null) ? string.Empty : this.CallOwnerId.ToString()).GetHashCode() ^ 
					((this.CallPurpose == null) ? string.Empty : this.CallPurpose.ToString()).GetHashCode() ^ 
					((this.CallResult == null) ? string.Empty : this.CallResult.ToString()).GetHashCode() ^ 
					((this.CallStartTime == null) ? string.Empty : this.CallStartTime.ToString()).GetHashCode() ^ 
					((this.CallType == null) ? string.Empty : this.CallType.ToString()).GetHashCode() ^ 
					((this.ContactId == null) ? string.Empty : this.ContactId.ToString()).GetHashCode() ^ 
					((this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString()).GetHashCode() ^ 
					((this.CreatedTime == null) ? string.Empty : this.CreatedTime.ToString()).GetHashCode() ^ 
					((this.Leadid == null) ? string.Empty : this.Leadid.ToString()).GetHashCode() ^ 
					((this.ModifiedTime == null) ? string.Empty : this.ModifiedTime.ToString()).GetHashCode() ^ 
					((this.Potentialid == null) ? string.Empty : this.Potentialid.ToString()).GetHashCode() ^ 
					((this.RelatedTo == null) ? string.Empty : this.RelatedTo.ToString()).GetHashCode() ^ 
					((this.Semodule == null) ? string.Empty : this.Semodule.ToString()).GetHashCode() ^ 
					((this.Subject == null) ? string.Empty : this.Subject.ToString()).GetHashCode() ^ 
					((this.Taskid == null) ? string.Empty : this.Taskid.ToString()).GetHashCode() ^ 
					((this.WhoIdId == null) ? string.Empty : this.WhoIdId.ToString()).GetHashCode() ^ 
					this.CallPk.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ZohoCallsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ZohoCallsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ZohoCallsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ZohoCallsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ZohoCallsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ZohoCallsBase Object1, ZohoCallsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if ( Object1.Accountid != null && Object2.Accountid != null )
			{
				if (Object1.Accountid != Object2.Accountid)
					equal = false;
			}
			else if (Object1.Accountid == null ^ Object2.Accountid == null )
			{
				equal = false;
			}
			if ( Object1.Billable != null && Object2.Billable != null )
			{
				if (Object1.Billable != Object2.Billable)
					equal = false;
			}
			else if (Object1.Billable == null ^ Object2.Billable == null )
			{
				equal = false;
			}
			if ( Object1.CallDuration != null && Object2.CallDuration != null )
			{
				if (Object1.CallDuration != Object2.CallDuration)
					equal = false;
			}
			else if (Object1.CallDuration == null ^ Object2.CallDuration == null )
			{
				equal = false;
			}
			if ( Object1.SafeNameCallDurationInMinutes != null && Object2.SafeNameCallDurationInMinutes != null )
			{
				if (Object1.SafeNameCallDurationInMinutes != Object2.SafeNameCallDurationInMinutes)
					equal = false;
			}
			else if (Object1.SafeNameCallDurationInMinutes == null ^ Object2.SafeNameCallDurationInMinutes == null )
			{
				equal = false;
			}
			if ( Object1.SafeNameCallDurationInSeconds != null && Object2.SafeNameCallDurationInSeconds != null )
			{
				if (Object1.SafeNameCallDurationInSeconds != Object2.SafeNameCallDurationInSeconds)
					equal = false;
			}
			else if (Object1.SafeNameCallDurationInSeconds == null ^ Object2.SafeNameCallDurationInSeconds == null )
			{
				equal = false;
			}
			if ( Object1.CallOwner != null && Object2.CallOwner != null )
			{
				if (Object1.CallOwner != Object2.CallOwner)
					equal = false;
			}
			else if (Object1.CallOwner == null ^ Object2.CallOwner == null )
			{
				equal = false;
			}
			if ( Object1.CallOwnerId != null && Object2.CallOwnerId != null )
			{
				if (Object1.CallOwnerId != Object2.CallOwnerId)
					equal = false;
			}
			else if (Object1.CallOwnerId == null ^ Object2.CallOwnerId == null )
			{
				equal = false;
			}
			if ( Object1.CallPurpose != null && Object2.CallPurpose != null )
			{
				if (Object1.CallPurpose != Object2.CallPurpose)
					equal = false;
			}
			else if (Object1.CallPurpose == null ^ Object2.CallPurpose == null )
			{
				equal = false;
			}
			if ( Object1.CallResult != null && Object2.CallResult != null )
			{
				if (Object1.CallResult != Object2.CallResult)
					equal = false;
			}
			else if (Object1.CallResult == null ^ Object2.CallResult == null )
			{
				equal = false;
			}
			if ( Object1.CallStartTime != null && Object2.CallStartTime != null )
			{
				if (Object1.CallStartTime != Object2.CallStartTime)
					equal = false;
			}
			else if (Object1.CallStartTime == null ^ Object2.CallStartTime == null )
			{
				equal = false;
			}
			if ( Object1.CallType != null && Object2.CallType != null )
			{
				if (Object1.CallType != Object2.CallType)
					equal = false;
			}
			else if (Object1.CallType == null ^ Object2.CallType == null )
			{
				equal = false;
			}
			if ( Object1.ContactId != null && Object2.ContactId != null )
			{
				if (Object1.ContactId != Object2.ContactId)
					equal = false;
			}
			else if (Object1.ContactId == null ^ Object2.ContactId == null )
			{
				equal = false;
			}
			if ( Object1.CreatedBy != null && Object2.CreatedBy != null )
			{
				if (Object1.CreatedBy != Object2.CreatedBy)
					equal = false;
			}
			else if (Object1.CreatedBy == null ^ Object2.CreatedBy == null )
			{
				equal = false;
			}
			if ( Object1.CreatedTime != null && Object2.CreatedTime != null )
			{
				if (Object1.CreatedTime != Object2.CreatedTime)
					equal = false;
			}
			else if (Object1.CreatedTime == null ^ Object2.CreatedTime == null )
			{
				equal = false;
			}
			if ( Object1.Leadid != null && Object2.Leadid != null )
			{
				if (Object1.Leadid != Object2.Leadid)
					equal = false;
			}
			else if (Object1.Leadid == null ^ Object2.Leadid == null )
			{
				equal = false;
			}
			if ( Object1.ModifiedTime != null && Object2.ModifiedTime != null )
			{
				if (Object1.ModifiedTime != Object2.ModifiedTime)
					equal = false;
			}
			else if (Object1.ModifiedTime == null ^ Object2.ModifiedTime == null )
			{
				equal = false;
			}
			if ( Object1.Potentialid != null && Object2.Potentialid != null )
			{
				if (Object1.Potentialid != Object2.Potentialid)
					equal = false;
			}
			else if (Object1.Potentialid == null ^ Object2.Potentialid == null )
			{
				equal = false;
			}
			if ( Object1.RelatedTo != null && Object2.RelatedTo != null )
			{
				if (Object1.RelatedTo != Object2.RelatedTo)
					equal = false;
			}
			else if (Object1.RelatedTo == null ^ Object2.RelatedTo == null )
			{
				equal = false;
			}
			if ( Object1.Semodule != null && Object2.Semodule != null )
			{
				if (Object1.Semodule != Object2.Semodule)
					equal = false;
			}
			else if (Object1.Semodule == null ^ Object2.Semodule == null )
			{
				equal = false;
			}
			if ( Object1.Subject != null && Object2.Subject != null )
			{
				if (Object1.Subject != Object2.Subject)
					equal = false;
			}
			else if (Object1.Subject == null ^ Object2.Subject == null )
			{
				equal = false;
			}
			if ( Object1.Taskid != null && Object2.Taskid != null )
			{
				if (Object1.Taskid != Object2.Taskid)
					equal = false;
			}
			else if (Object1.Taskid == null ^ Object2.Taskid == null )
			{
				equal = false;
			}
			if ( Object1.WhoIdId != null && Object2.WhoIdId != null )
			{
				if (Object1.WhoIdId != Object2.WhoIdId)
					equal = false;
			}
			else if (Object1.WhoIdId == null ^ Object2.WhoIdId == null )
			{
				equal = false;
			}
			if (Object1.CallPk != Object2.CallPk)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ZohoCallsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ZohoCallsComparer GetComparer()
        {
            return new ZohoCallsComparer();
        }
        */

        // Comparer delegates back to ZohoCalls
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ZohoCalls rhs, ZohoCallsColumn which)
        {
            switch (which)
            {
            	
            	
            	case ZohoCallsColumn.Accountid:
            		return this.Accountid.CompareTo(rhs.Accountid);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.Billable:
            		return this.Billable.CompareTo(rhs.Billable);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CallDuration:
            		return this.CallDuration.CompareTo(rhs.CallDuration);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.SafeNameCallDurationInMinutes:
            		return this.SafeNameCallDurationInMinutes.Value.CompareTo(rhs.SafeNameCallDurationInMinutes.Value);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.SafeNameCallDurationInSeconds:
            		return this.SafeNameCallDurationInSeconds.Value.CompareTo(rhs.SafeNameCallDurationInSeconds.Value);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CallOwner:
            		return this.CallOwner.CompareTo(rhs.CallOwner);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CallOwnerId:
            		return this.CallOwnerId.CompareTo(rhs.CallOwnerId);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CallPurpose:
            		return this.CallPurpose.CompareTo(rhs.CallPurpose);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CallResult:
            		return this.CallResult.CompareTo(rhs.CallResult);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CallStartTime:
            		return this.CallStartTime.Value.CompareTo(rhs.CallStartTime.Value);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CallType:
            		return this.CallType.CompareTo(rhs.CallType);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.ContactId:
            		return this.ContactId.CompareTo(rhs.ContactId);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CreatedBy:
            		return this.CreatedBy.CompareTo(rhs.CreatedBy);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CreatedTime:
            		return this.CreatedTime.Value.CompareTo(rhs.CreatedTime.Value);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.Leadid:
            		return this.Leadid.CompareTo(rhs.Leadid);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.ModifiedTime:
            		return this.ModifiedTime.Value.CompareTo(rhs.ModifiedTime.Value);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.Potentialid:
            		return this.Potentialid.CompareTo(rhs.Potentialid);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.RelatedTo:
            		return this.RelatedTo.CompareTo(rhs.RelatedTo);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.Semodule:
            		return this.Semodule.CompareTo(rhs.Semodule);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.Subject:
            		return this.Subject.CompareTo(rhs.Subject);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.Taskid:
            		return this.Taskid.CompareTo(rhs.Taskid);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.WhoIdId:
            		return this.WhoIdId.CompareTo(rhs.WhoIdId);
            		
            		                 
            	
            	
            	case ZohoCallsColumn.CallPk:
            		return this.CallPk.CompareTo(rhs.CallPk);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ZohoCallsKey> Members
		
		// member variable for the EntityId property
		private ZohoCallsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ZohoCallsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ZohoCallsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ZohoCalls")
					.Append("|").Append( this.CallPk.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{24}{23}- Accountid: {0}{23}- Billable: {1}{23}- CallDuration: {2}{23}- SafeNameCallDurationInMinutes: {3}{23}- SafeNameCallDurationInSeconds: {4}{23}- CallOwner: {5}{23}- CallOwnerId: {6}{23}- CallPurpose: {7}{23}- CallResult: {8}{23}- CallStartTime: {9}{23}- CallType: {10}{23}- ContactId: {11}{23}- CreatedBy: {12}{23}- CreatedTime: {13}{23}- Leadid: {14}{23}- ModifiedTime: {15}{23}- Potentialid: {16}{23}- RelatedTo: {17}{23}- Semodule: {18}{23}- Subject: {19}{23}- Taskid: {20}{23}- WhoIdId: {21}{23}- CallPk: {22}{23}{25}", 
				(this.Accountid == null) ? string.Empty : this.Accountid.ToString(),
				(this.Billable == null) ? string.Empty : this.Billable.ToString(),
				(this.CallDuration == null) ? string.Empty : this.CallDuration.ToString(),
				(this.SafeNameCallDurationInMinutes == null) ? string.Empty : this.SafeNameCallDurationInMinutes.ToString(),
				(this.SafeNameCallDurationInSeconds == null) ? string.Empty : this.SafeNameCallDurationInSeconds.ToString(),
				(this.CallOwner == null) ? string.Empty : this.CallOwner.ToString(),
				(this.CallOwnerId == null) ? string.Empty : this.CallOwnerId.ToString(),
				(this.CallPurpose == null) ? string.Empty : this.CallPurpose.ToString(),
				(this.CallResult == null) ? string.Empty : this.CallResult.ToString(),
				(this.CallStartTime == null) ? string.Empty : this.CallStartTime.ToString(),
				(this.CallType == null) ? string.Empty : this.CallType.ToString(),
				(this.ContactId == null) ? string.Empty : this.ContactId.ToString(),
				(this.CreatedBy == null) ? string.Empty : this.CreatedBy.ToString(),
				(this.CreatedTime == null) ? string.Empty : this.CreatedTime.ToString(),
				(this.Leadid == null) ? string.Empty : this.Leadid.ToString(),
				(this.ModifiedTime == null) ? string.Empty : this.ModifiedTime.ToString(),
				(this.Potentialid == null) ? string.Empty : this.Potentialid.ToString(),
				(this.RelatedTo == null) ? string.Empty : this.RelatedTo.ToString(),
				(this.Semodule == null) ? string.Empty : this.Semodule.ToString(),
				(this.Subject == null) ? string.Empty : this.Subject.ToString(),
				(this.Taskid == null) ? string.Empty : this.Taskid.ToString(),
				(this.WhoIdId == null) ? string.Empty : this.WhoIdId.ToString(),
				this.CallPk,
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ZohoCalls' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ZohoCallsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CallPK : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ZohoCalls"</remarks>
		public System.Int64 CallPk;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// ACCOUNTID : 
		/// </summary>
		public System.String Accountid = null;
		
		/// <summary>
		/// Billable : 
		/// </summary>
		public System.String Billable = null;
		
		/// <summary>
		/// Call Duration : 
		/// </summary>
		public System.String CallDuration = null;
		
		/// <summary>
		/// Call Duration (in minutes) : 
		/// </summary>
		public System.Double? SafeNameCallDurationInMinutes = null;
		
		/// <summary>
		/// Call Duration (in seconds) : 
		/// </summary>
		public System.Double? SafeNameCallDurationInSeconds = null;
		
		/// <summary>
		/// Call Owner : 
		/// </summary>
		public System.String CallOwner = null;
		
		/// <summary>
		/// Call Owner Id : 
		/// </summary>
		public System.String CallOwnerId = null;
		
		/// <summary>
		/// Call Purpose : 
		/// </summary>
		public System.String CallPurpose = null;
		
		/// <summary>
		/// Call Result : 
		/// </summary>
		public System.String CallResult = null;
		
		/// <summary>
		/// Call Start Time : 
		/// </summary>
		public System.DateTime? CallStartTime = null;
		
		/// <summary>
		/// Call Type : 
		/// </summary>
		public System.String CallType = null;
		
		/// <summary>
		/// ContactID : 
		/// </summary>
		public System.String ContactId = null;
		
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		public System.String CreatedBy = null;
		
		/// <summary>
		/// Created Time : 
		/// </summary>
		public System.DateTime? CreatedTime = null;
		
		/// <summary>
		/// LEADID : 
		/// </summary>
		public System.String Leadid = null;
		
		/// <summary>
		/// Modified Time : 
		/// </summary>
		public System.DateTime? ModifiedTime = null;
		
		/// <summary>
		/// POTENTIALID : 
		/// </summary>
		public System.String Potentialid = null;
		
		/// <summary>
		/// RELATED To : 
		/// </summary>
		public System.String RelatedTo = null;
		
		/// <summary>
		/// SEMODULE : 
		/// </summary>
		public System.String Semodule = null;
		
		/// <summary>
		/// Subject : 
		/// </summary>
		public System.String Subject = null;
		
		/// <summary>
		/// TASKID : 
		/// </summary>
		public System.String Taskid = null;
		
		/// <summary>
		/// Who Id Id : 
		/// </summary>
		public System.String WhoIdId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ZohoCallsEntityData _tmp = new ZohoCallsEntityData();
						
			_tmp.CallPk = this.CallPk;
			
			_tmp.Accountid = this.Accountid;
			_tmp.Billable = this.Billable;
			_tmp.CallDuration = this.CallDuration;
			_tmp.SafeNameCallDurationInMinutes = this.SafeNameCallDurationInMinutes;
			_tmp.SafeNameCallDurationInSeconds = this.SafeNameCallDurationInSeconds;
			_tmp.CallOwner = this.CallOwner;
			_tmp.CallOwnerId = this.CallOwnerId;
			_tmp.CallPurpose = this.CallPurpose;
			_tmp.CallResult = this.CallResult;
			_tmp.CallStartTime = this.CallStartTime;
			_tmp.CallType = this.CallType;
			_tmp.ContactId = this.ContactId;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.CreatedTime = this.CreatedTime;
			_tmp.Leadid = this.Leadid;
			_tmp.ModifiedTime = this.ModifiedTime;
			_tmp.Potentialid = this.Potentialid;
			_tmp.RelatedTo = this.RelatedTo;
			_tmp.Semodule = this.Semodule;
			_tmp.Subject = this.Subject;
			_tmp.Taskid = this.Taskid;
			_tmp.WhoIdId = this.WhoIdId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ZohoCallsEntityData _tmp = new ZohoCallsEntityData();
						
			_tmp.CallPk = this.CallPk;
			
			_tmp.Accountid = this.Accountid;
			_tmp.Billable = this.Billable;
			_tmp.CallDuration = this.CallDuration;
			_tmp.SafeNameCallDurationInMinutes = this.SafeNameCallDurationInMinutes;
			_tmp.SafeNameCallDurationInSeconds = this.SafeNameCallDurationInSeconds;
			_tmp.CallOwner = this.CallOwner;
			_tmp.CallOwnerId = this.CallOwnerId;
			_tmp.CallPurpose = this.CallPurpose;
			_tmp.CallResult = this.CallResult;
			_tmp.CallStartTime = this.CallStartTime;
			_tmp.CallType = this.CallType;
			_tmp.ContactId = this.ContactId;
			_tmp.CreatedBy = this.CreatedBy;
			_tmp.CreatedTime = this.CreatedTime;
			_tmp.Leadid = this.Leadid;
			_tmp.ModifiedTime = this.ModifiedTime;
			_tmp.Potentialid = this.Potentialid;
			_tmp.RelatedTo = this.RelatedTo;
			_tmp.Semodule = this.Semodule;
			_tmp.Subject = this.Subject;
			_tmp.Taskid = this.Taskid;
			_tmp.WhoIdId = this.WhoIdId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ZohoCallsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ZohoCallsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ZohoCallsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ZohoCallsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ZohoCallsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ZohoCallsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				ZohoCallsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ZohoCallsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ZohoCallsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ZohoCallsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ZohoCallsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ZohoCallsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ZohoCallsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ZohoCalls"/> object.
	/// </remarks>
	public class ZohoCallsEventArgs : System.EventArgs
	{
		private ZohoCallsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ZohoCallsEventArgs class.
		///</summary>
		public ZohoCallsEventArgs(ZohoCallsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ZohoCallsEventArgs class.
		///</summary>
		public ZohoCallsEventArgs(ZohoCallsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ZohoCallsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ZohoCallsColumn" />
		public ZohoCallsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ZohoCalls related events.
	///</summary>
	public delegate void ZohoCallsEventHandler(object sender, ZohoCallsEventArgs e);
	
	#region ZohoCallsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ZohoCallsComparer : System.Collections.Generic.IComparer<ZohoCalls>
	{
		ZohoCallsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ZohoCallsComparer"/> class.
        /// </summary>
		public ZohoCallsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ZohoCallsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ZohoCallsComparer(ZohoCallsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="ZohoCalls"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="ZohoCalls"/> to compare.</param>
        /// <param name="b">The second <c>ZohoCalls</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ZohoCalls a, ZohoCalls b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ZohoCalls entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ZohoCalls a, ZohoCalls b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ZohoCallsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ZohoCallsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ZohoCalls"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ZohoCallsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ZohoCallsKey class.
		/// </summary>
		public ZohoCallsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ZohoCallsKey class.
		/// </summary>
		public ZohoCallsKey(ZohoCallsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CallPk = entity.CallPk;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ZohoCallsKey class.
		/// </summary>
		public ZohoCallsKey(System.Int64 _callPk)
		{
			#region Init Properties

			this.CallPk = _callPk;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ZohoCallsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ZohoCallsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CallPk property
		private System.Int64 _callPk;
		
		/// <summary>
		/// Gets or sets the CallPk property.
		/// </summary>
		public System.Int64 CallPk
		{
			get { return _callPk; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CallPk = value;
				
				_callPk = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CallPk = ( values["CallPk"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["CallPk"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CallPk", CallPk);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CallPk: {0}{1}",
								CallPk,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ZohoCallsColumn Enum
	
	/// <summary>
	/// Enumerate the ZohoCalls columns.
	/// </summary>
	[Serializable]
	public enum ZohoCallsColumn : int
	{
		/// <summary>
		/// Accountid : 
		/// </summary>
		[EnumTextValue("Accountid")]
		[ColumnEnum("ACCOUNTID", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Accountid = 1,
		/// <summary>
		/// Billable : 
		/// </summary>
		[EnumTextValue("Billable")]
		[ColumnEnum("Billable", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Billable = 2,
		/// <summary>
		/// CallDuration : 
		/// </summary>
		[EnumTextValue("Call Duration")]
		[ColumnEnum("Call Duration", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CallDuration = 3,
		/// <summary>
		/// SafeNameCallDurationInMinutes : 
		/// </summary>
		[EnumTextValue("Call Duration(in Minutes)")]
		[ColumnEnum("Call Duration (in minutes)", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		SafeNameCallDurationInMinutes = 4,
		/// <summary>
		/// SafeNameCallDurationInSeconds : 
		/// </summary>
		[EnumTextValue("Call Duration(in Seconds)")]
		[ColumnEnum("Call Duration (in seconds)", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		SafeNameCallDurationInSeconds = 5,
		/// <summary>
		/// CallOwner : 
		/// </summary>
		[EnumTextValue("Call Owner")]
		[ColumnEnum("Call Owner", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CallOwner = 6,
		/// <summary>
		/// CallOwnerId : 
		/// </summary>
		[EnumTextValue("Call Owner Id")]
		[ColumnEnum("Call Owner Id", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CallOwnerId = 7,
		/// <summary>
		/// CallPurpose : 
		/// </summary>
		[EnumTextValue("Call Purpose")]
		[ColumnEnum("Call Purpose", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CallPurpose = 8,
		/// <summary>
		/// CallResult : 
		/// </summary>
		[EnumTextValue("Call Result")]
		[ColumnEnum("Call Result", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CallResult = 9,
		/// <summary>
		/// CallStartTime : 
		/// </summary>
		[EnumTextValue("Call Start Time")]
		[ColumnEnum("Call Start Time", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CallStartTime = 10,
		/// <summary>
		/// CallType : 
		/// </summary>
		[EnumTextValue("Call Type")]
		[ColumnEnum("Call Type", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CallType = 11,
		/// <summary>
		/// ContactId : 
		/// </summary>
		[EnumTextValue("Contact Id")]
		[ColumnEnum("ContactID", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		ContactId = 12,
		/// <summary>
		/// CreatedBy : 
		/// </summary>
		[EnumTextValue("Created By")]
		[ColumnEnum("CreatedBy", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		CreatedBy = 13,
		/// <summary>
		/// CreatedTime : 
		/// </summary>
		[EnumTextValue("Created Time")]
		[ColumnEnum("Created Time", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedTime = 14,
		/// <summary>
		/// Leadid : 
		/// </summary>
		[EnumTextValue("Leadid")]
		[ColumnEnum("LEADID", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Leadid = 15,
		/// <summary>
		/// ModifiedTime : 
		/// </summary>
		[EnumTextValue("Modified Time")]
		[ColumnEnum("Modified Time", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ModifiedTime = 16,
		/// <summary>
		/// Potentialid : 
		/// </summary>
		[EnumTextValue("Potentialid")]
		[ColumnEnum("POTENTIALID", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Potentialid = 17,
		/// <summary>
		/// RelatedTo : 
		/// </summary>
		[EnumTextValue("Related To")]
		[ColumnEnum("RELATED To", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		RelatedTo = 18,
		/// <summary>
		/// Semodule : 
		/// </summary>
		[EnumTextValue("Semodule")]
		[ColumnEnum("SEMODULE", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Semodule = 19,
		/// <summary>
		/// Subject : 
		/// </summary>
		[EnumTextValue("Subject")]
		[ColumnEnum("Subject", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Subject = 20,
		/// <summary>
		/// Taskid : 
		/// </summary>
		[EnumTextValue("Taskid")]
		[ColumnEnum("TASKID", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Taskid = 21,
		/// <summary>
		/// WhoIdId : 
		/// </summary>
		[EnumTextValue("Who Id Id")]
		[ColumnEnum("Who Id Id", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		WhoIdId = 22,
		/// <summary>
		/// CallPk : 
		/// </summary>
		[EnumTextValue("Call Pk")]
		[ColumnEnum("CallPK", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		CallPk = 23
	}//End enum

	#endregion ZohoCallsColumn Enum

} // end namespace
