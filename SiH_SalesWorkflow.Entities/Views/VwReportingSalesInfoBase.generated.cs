/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : Thursday, May 12, 2016
	Important: Do not modify this file. Edit the file VwReportingSalesInfo.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace SiH_SalesWorkflow.Entities
{
	///<summary>
	/// An object representation of the 'vw_REPORTING_SalesInfo' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VwReportingSalesInfoBase")]
	public abstract partial class VwReportingSalesInfoBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// LEADID : 
		/// </summary>
		private System.String		  _leadid = null;
		
		/// <summary>
		/// First Name : 
		/// </summary>
		private System.String		  _firstName = null;
		
		/// <summary>
		/// Last Name : 
		/// </summary>
		private System.String		  _lastName = null;
		
		/// <summary>
		/// Created Time : 
		/// </summary>
		private System.DateTime?		  _createdTime = null;
		
		/// <summary>
		/// LeadCreateDate : 
		/// </summary>
		private System.DateTime?		  _leadCreateDate = null;
		
		/// <summary>
		/// Sold to Person : 
		/// </summary>
		private System.String		  _soldToPerson = null;
		
		/// <summary>
		/// Sale Date : 
		/// </summary>
		private System.DateTime?		  _saleDate = null;
		
		/// <summary>
		/// DaysToSale : 
		/// </summary>
		private System.Int32?		  _daysToSale = null;
		
		/// <summary>
		/// CallCount : 
		/// </summary>
		private System.Int32?		  _callCount = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VwReportingSalesInfoBase"/> instance.
		///</summary>
		public VwReportingSalesInfoBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VwReportingSalesInfoBase"/> instance.
		///</summary>
		///<param name="_leadid"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_createdTime"></param>
		///<param name="_leadCreateDate"></param>
		///<param name="_soldToPerson"></param>
		///<param name="_saleDate"></param>
		///<param name="_daysToSale"></param>
		///<param name="_callCount"></param>
		public VwReportingSalesInfoBase(System.String _leadid, System.String _firstName, System.String _lastName, System.DateTime? _createdTime, System.DateTime? _leadCreateDate, System.String _soldToPerson, System.DateTime? _saleDate, System.Int32? _daysToSale, System.Int32? _callCount)
		{
			this._leadid = _leadid;
			this._firstName = _firstName;
			this._lastName = _lastName;
			this._createdTime = _createdTime;
			this._leadCreateDate = _leadCreateDate;
			this._soldToPerson = _soldToPerson;
			this._saleDate = _saleDate;
			this._daysToSale = _daysToSale;
			this._callCount = _callCount;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VwReportingSalesInfo"/> instance.
		///</summary>
		///<param name="_leadid"></param>
		///<param name="_firstName"></param>
		///<param name="_lastName"></param>
		///<param name="_createdTime"></param>
		///<param name="_leadCreateDate"></param>
		///<param name="_soldToPerson"></param>
		///<param name="_saleDate"></param>
		///<param name="_daysToSale"></param>
		///<param name="_callCount"></param>
		public static VwReportingSalesInfo CreateVwReportingSalesInfo(System.String _leadid, System.String _firstName, System.String _lastName, System.DateTime? _createdTime, System.DateTime? _leadCreateDate, System.String _soldToPerson, System.DateTime? _saleDate, System.Int32? _daysToSale, System.Int32? _callCount)
		{
			VwReportingSalesInfo newVwReportingSalesInfo = new VwReportingSalesInfo();
			newVwReportingSalesInfo.Leadid = _leadid;
			newVwReportingSalesInfo.FirstName = _firstName;
			newVwReportingSalesInfo.LastName = _lastName;
			newVwReportingSalesInfo.CreatedTime = _createdTime;
			newVwReportingSalesInfo.LeadCreateDate = _leadCreateDate;
			newVwReportingSalesInfo.SoldToPerson = _soldToPerson;
			newVwReportingSalesInfo.SaleDate = _saleDate;
			newVwReportingSalesInfo.DaysToSale = _daysToSale;
			newVwReportingSalesInfo.CallCount = _callCount;
			return newVwReportingSalesInfo;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the LEADID property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Leadid
		{
			get
			{
				return this._leadid; 
			}
			set
			{
				if (_leadid == value)
					return;
					
				this._leadid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Leadid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the First Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String FirstName
		{
			get
			{
				return this._firstName; 
			}
			set
			{
				if (_firstName == value)
					return;
					
				this._firstName = value;
				this._isDirty = true;
				
				OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Last Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LastName
		{
			get
			{
				return this._lastName; 
			}
			set
			{
				if (_lastName == value)
					return;
					
				this._lastName = value;
				this._isDirty = true;
				
				OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Created Time property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreatedTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? CreatedTime
		{
			get
			{
				return this._createdTime; 
			}
			set
			{
				if (_createdTime == value && CreatedTime != null )
					return;
					
				this._createdTime = value;
				this._isDirty = true;
				
				OnPropertyChanged("CreatedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LeadCreateDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLeadCreateDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? LeadCreateDate
		{
			get
			{
				return this._leadCreateDate; 
			}
			set
			{
				if (_leadCreateDate == value && LeadCreateDate != null )
					return;
					
				this._leadCreateDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("LeadCreateDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Sold to Person property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SoldToPerson
		{
			get
			{
				return this._soldToPerson; 
			}
			set
			{
				if (_soldToPerson == value)
					return;
					
				this._soldToPerson = value;
				this._isDirty = true;
				
				OnPropertyChanged("SoldToPerson");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Sale Date property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSaleDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? SaleDate
		{
			get
			{
				return this._saleDate; 
			}
			set
			{
				if (_saleDate == value && SaleDate != null )
					return;
					
				this._saleDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("SaleDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DaysToSale property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDaysToSaleNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? DaysToSale
		{
			get
			{
				return this._daysToSale; 
			}
			set
			{
				if (_daysToSale == value && DaysToSale != null )
					return;
					
				this._daysToSale = value;
				this._isDirty = true;
				
				OnPropertyChanged("DaysToSale");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CallCount property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCallCountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? CallCount
		{
			get
			{
				return this._callCount; 
			}
			set
			{
				if (_callCount == value && CallCount != null )
					return;
					
				this._callCount = value;
				this._isDirty = true;
				
				OnPropertyChanged("CallCount");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vw_REPORTING_SalesInfo"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VwReportingSalesInfoBase Entity 
		///</summary>
		public virtual VwReportingSalesInfoBase Copy()
		{
			//shallow copy entity
			VwReportingSalesInfo copy = new VwReportingSalesInfo();
				copy.Leadid = this.Leadid;
				copy.FirstName = this.FirstName;
				copy.LastName = this.LastName;
				copy.CreatedTime = this.CreatedTime;
				copy.LeadCreateDate = this.LeadCreateDate;
				copy.SoldToPerson = this.SoldToPerson;
				copy.SaleDate = this.SaleDate;
				copy.DaysToSale = this.DaysToSale;
				copy.CallCount = this.CallCount;
			copy.AcceptChanges();
			return (VwReportingSalesInfo)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VwReportingSalesInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VwReportingSalesInfoBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VwReportingSalesInfoBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VwReportingSalesInfoBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VwReportingSalesInfoBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VwReportingSalesInfoBase Object1, VwReportingSalesInfoBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.Leadid != null && Object2.Leadid != null )
			{
				if (Object1.Leadid != Object2.Leadid)
					equal = false;
			}
			else if (Object1.Leadid == null ^ Object1.Leadid == null )
			{
				equal = false;
			}
			if (Object1.FirstName != null && Object2.FirstName != null )
			{
				if (Object1.FirstName != Object2.FirstName)
					equal = false;
			}
			else if (Object1.FirstName == null ^ Object1.FirstName == null )
			{
				equal = false;
			}
			if (Object1.LastName != null && Object2.LastName != null )
			{
				if (Object1.LastName != Object2.LastName)
					equal = false;
			}
			else if (Object1.LastName == null ^ Object1.LastName == null )
			{
				equal = false;
			}
			if (Object1.CreatedTime != null && Object2.CreatedTime != null )
			{
				if (Object1.CreatedTime != Object2.CreatedTime)
					equal = false;
			}
			else if (Object1.CreatedTime == null ^ Object1.CreatedTime == null )
			{
				equal = false;
			}
			if (Object1.LeadCreateDate != null && Object2.LeadCreateDate != null )
			{
				if (Object1.LeadCreateDate != Object2.LeadCreateDate)
					equal = false;
			}
			else if (Object1.LeadCreateDate == null ^ Object1.LeadCreateDate == null )
			{
				equal = false;
			}
			if (Object1.SoldToPerson != null && Object2.SoldToPerson != null )
			{
				if (Object1.SoldToPerson != Object2.SoldToPerson)
					equal = false;
			}
			else if (Object1.SoldToPerson == null ^ Object1.SoldToPerson == null )
			{
				equal = false;
			}
			if (Object1.SaleDate != null && Object2.SaleDate != null )
			{
				if (Object1.SaleDate != Object2.SaleDate)
					equal = false;
			}
			else if (Object1.SaleDate == null ^ Object1.SaleDate == null )
			{
				equal = false;
			}
			if (Object1.DaysToSale != null && Object2.DaysToSale != null )
			{
				if (Object1.DaysToSale != Object2.DaysToSale)
					equal = false;
			}
			else if (Object1.DaysToSale == null ^ Object1.DaysToSale == null )
			{
				equal = false;
			}
			if (Object1.CallCount != null && Object2.CallCount != null )
			{
				if (Object1.CallCount != Object2.CallCount)
					equal = false;
			}
			else if (Object1.CallCount == null ^ Object1.CallCount == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VwReportingSalesInfo entity, string propertyName)
		{
			switch (propertyName)
			{
				case "Leadid":
					return entity.Leadid;
				case "FirstName":
					return entity.FirstName;
				case "LastName":
					return entity.LastName;
				case "CreatedTime":
					return entity.CreatedTime;
				case "LeadCreateDate":
					return entity.LeadCreateDate;
				case "SoldToPerson":
					return entity.SoldToPerson;
				case "SaleDate":
					return entity.SaleDate;
				case "DaysToSale":
					return entity.DaysToSale;
				case "CallCount":
					return entity.CallCount;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VwReportingSalesInfo, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- Leadid: {0}{9}- FirstName: {1}{9}- LastName: {2}{9}- CreatedTime: {3}{9}- LeadCreateDate: {4}{9}- SoldToPerson: {5}{9}- SaleDate: {6}{9}- DaysToSale: {7}{9}- CallCount: {8}{9}", 
				(this.Leadid == null) ? string.Empty : this.Leadid.ToString(),
			     
				(this.FirstName == null) ? string.Empty : this.FirstName.ToString(),
			     
				(this.LastName == null) ? string.Empty : this.LastName.ToString(),
			     
				(this.CreatedTime == null) ? string.Empty : this.CreatedTime.ToString(),
			     
				(this.LeadCreateDate == null) ? string.Empty : this.LeadCreateDate.ToString(),
			     
				(this.SoldToPerson == null) ? string.Empty : this.SoldToPerson.ToString(),
			     
				(this.SaleDate == null) ? string.Empty : this.SaleDate.ToString(),
			     
				(this.DaysToSale == null) ? string.Empty : this.DaysToSale.ToString(),
			     
				(this.CallCount == null) ? string.Empty : this.CallCount.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VwReportingSalesInfo columns.
	/// </summary>
	[Serializable]
	public enum VwReportingSalesInfoColumn
	{
		/// <summary>
		/// LEADID : 
		/// </summary>
		[EnumTextValue("LEADID")]
		[ColumnEnum("LEADID", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Leadid,
		/// <summary>
		/// First Name : 
		/// </summary>
		[EnumTextValue("First Name")]
		[ColumnEnum("First Name", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		FirstName,
		/// <summary>
		/// Last Name : 
		/// </summary>
		[EnumTextValue("Last Name")]
		[ColumnEnum("Last Name", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		LastName,
		/// <summary>
		/// Created Time : 
		/// </summary>
		[EnumTextValue("Created Time")]
		[ColumnEnum("Created Time", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedTime,
		/// <summary>
		/// LeadCreateDate : 
		/// </summary>
		[EnumTextValue("LeadCreateDate")]
		[ColumnEnum("LeadCreateDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LeadCreateDate,
		/// <summary>
		/// Sold to Person : 
		/// </summary>
		[EnumTextValue("Sold to Person")]
		[ColumnEnum("Sold to Person", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		SoldToPerson,
		/// <summary>
		/// Sale Date : 
		/// </summary>
		[EnumTextValue("Sale Date")]
		[ColumnEnum("Sale Date", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		SaleDate,
		/// <summary>
		/// DaysToSale : 
		/// </summary>
		[EnumTextValue("DaysToSale")]
		[ColumnEnum("DaysToSale", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DaysToSale,
		/// <summary>
		/// CallCount : 
		/// </summary>
		[EnumTextValue("CallCount")]
		[ColumnEnum("CallCount", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CallCount
	}//End enum

} // end namespace
