/*
	File Generated by NetTiers templates [www.nettiers.net]
	Generated on : Thursday, May 12, 2016
	Important: Do not modify this file. Edit the file SqlZohoCallsProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using SiH_SalesWorkflow.Entities;
using SiH_SalesWorkflow.Data;
using SiH_SalesWorkflow.Data.Bases;

#endregion

namespace SiH_SalesWorkflow.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="ZohoCalls"/> entity.
	///</summary>
	public abstract partial class SqlZohoCallsProviderBase : ZohoCallsProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlZohoCallsProviderBase"/> instance.
		/// </summary>
		public SqlZohoCallsProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlZohoCallsProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlZohoCallsProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_callPk">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int64 _callPk)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoCalls_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@CallPk", DbType.Int64, _callPk);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(ZohoCalls)
					,_callPk);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of SiH_SalesWorkflow.Entities.ZohoCalls objects.</returns>
		public override TList<ZohoCalls> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<ZohoCalls>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoCalls_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Accountid", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Billable", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallDuration", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SafeNameCallDurationInMinutes", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SafeNameCallDurationInSeconds", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallOwner", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallOwnerId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallPurpose", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallResult", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallStartTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallType", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ContactId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreatedBy", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreatedTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Leadid", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModifiedTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Potentialid", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RelatedTo", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Semodule", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Subject", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Taskid", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@WhoIdId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallPk", DbType.Int64, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("accountid ") || clause.Trim().StartsWith("accountid="))
				{
					database.SetParameterValue(commandWrapper, "@Accountid", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("billable ") || clause.Trim().StartsWith("billable="))
				{
					database.SetParameterValue(commandWrapper, "@Billable", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("call duration ") || clause.Trim().StartsWith("call duration="))
				{
					database.SetParameterValue(commandWrapper, "@CallDuration", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("call duration (in minutes) ") || clause.Trim().StartsWith("call duration (in minutes)="))
				{
					database.SetParameterValue(commandWrapper, "@SafeNameCallDurationInMinutes", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("call duration (in seconds) ") || clause.Trim().StartsWith("call duration (in seconds)="))
				{
					database.SetParameterValue(commandWrapper, "@SafeNameCallDurationInSeconds", 
						clause.Trim().Remove(0,26).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("call owner ") || clause.Trim().StartsWith("call owner="))
				{
					database.SetParameterValue(commandWrapper, "@CallOwner", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("call owner id ") || clause.Trim().StartsWith("call owner id="))
				{
					database.SetParameterValue(commandWrapper, "@CallOwnerId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("call purpose ") || clause.Trim().StartsWith("call purpose="))
				{
					database.SetParameterValue(commandWrapper, "@CallPurpose", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("call result ") || clause.Trim().StartsWith("call result="))
				{
					database.SetParameterValue(commandWrapper, "@CallResult", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("call start time ") || clause.Trim().StartsWith("call start time="))
				{
					database.SetParameterValue(commandWrapper, "@CallStartTime", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("call type ") || clause.Trim().StartsWith("call type="))
				{
					database.SetParameterValue(commandWrapper, "@CallType", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("contactid ") || clause.Trim().StartsWith("contactid="))
				{
					database.SetParameterValue(commandWrapper, "@ContactId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("createdby ") || clause.Trim().StartsWith("createdby="))
				{
					database.SetParameterValue(commandWrapper, "@CreatedBy", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("created time ") || clause.Trim().StartsWith("created time="))
				{
					database.SetParameterValue(commandWrapper, "@CreatedTime", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("leadid ") || clause.Trim().StartsWith("leadid="))
				{
					database.SetParameterValue(commandWrapper, "@Leadid", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("modified time ") || clause.Trim().StartsWith("modified time="))
				{
					database.SetParameterValue(commandWrapper, "@ModifiedTime", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("potentialid ") || clause.Trim().StartsWith("potentialid="))
				{
					database.SetParameterValue(commandWrapper, "@Potentialid", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("related to ") || clause.Trim().StartsWith("related to="))
				{
					database.SetParameterValue(commandWrapper, "@RelatedTo", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("semodule ") || clause.Trim().StartsWith("semodule="))
				{
					database.SetParameterValue(commandWrapper, "@Semodule", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("subject ") || clause.Trim().StartsWith("subject="))
				{
					database.SetParameterValue(commandWrapper, "@Subject", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("taskid ") || clause.Trim().StartsWith("taskid="))
				{
					database.SetParameterValue(commandWrapper, "@Taskid", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("who id id ") || clause.Trim().StartsWith("who id id="))
				{
					database.SetParameterValue(commandWrapper, "@WhoIdId", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("callpk ") || clause.Trim().StartsWith("callpk="))
				{
					database.SetParameterValue(commandWrapper, "@CallPk", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<ZohoCalls> rows = new TList<ZohoCalls>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of SiH_SalesWorkflow.Entities.ZohoCalls objects.</returns>
		public override TList<ZohoCalls> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoCalls_Find_Dynamic", typeof(ZohoCallsColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<ZohoCalls> rows = new TList<ZohoCalls>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SiH_SalesWorkflow.Entities.ZohoCalls objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ZohoCalls> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoCalls_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<ZohoCalls> rows = new TList<ZohoCalls>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SiH_SalesWorkflow.Entities.ZohoCalls objects.</returns>
		public override TList<ZohoCalls> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoCalls_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<ZohoCalls> rows = new TList<ZohoCalls>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByCallPk
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ZohoCalls index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_callPk"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="SiH_SalesWorkflow.Entities.ZohoCalls"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override SiH_SalesWorkflow.Entities.ZohoCalls GetByCallPk(TransactionManager transactionManager, System.Int64 _callPk, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoCalls_GetByCallPk", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@CallPk", DbType.Int64, _callPk);
			
			IDataReader reader = null;
			TList<ZohoCalls> tmp = new TList<ZohoCalls>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByCallPk", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByCallPk", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion


		#region GetByLeadid
					
		/// <summary>
		/// 	Gets rows from the datasource based on the ZohoCallsLeadID index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_leadid"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;ZohoCalls&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ZohoCalls> GetByLeadid(TransactionManager transactionManager, System.String _leadid, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoCalls_GetByLeadid", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Leadid", DbType.String, _leadid);
			
			IDataReader reader = null;
			TList<ZohoCalls> tmp = new TList<ZohoCalls>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLeadid", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLeadid", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the SiH_SalesWorkflow.Entities.ZohoCalls object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<SiH_SalesWorkflow.Entities.ZohoCalls> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ZohoCalls";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("ACCOUNTID", typeof(System.String));
			col0.AllowDBNull = true;		
			DataColumn col1 = dataTable.Columns.Add("Billable", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("Call Duration", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("Call Duration (in minutes)", typeof(System.Double));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("Call Duration (in seconds)", typeof(System.Double));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("Call Owner", typeof(System.String));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("Call Owner Id", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("Call Purpose", typeof(System.String));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("Call Result", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("Call Start Time", typeof(System.DateTime));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("Call Type", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ContactID", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("CreatedBy", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("Created Time", typeof(System.DateTime));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("LEADID", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("Modified Time", typeof(System.DateTime));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("POTENTIALID", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("RELATED To", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("SEMODULE", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("Subject", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("TASKID", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("Who Id Id", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("CallPK", typeof(System.Int64));
			col22.AllowDBNull = false;		
			
			bulkCopy.ColumnMappings.Add("ACCOUNTID", "ACCOUNTID");
			bulkCopy.ColumnMappings.Add("Billable", "Billable");
			bulkCopy.ColumnMappings.Add("Call Duration", "Call Duration");
			bulkCopy.ColumnMappings.Add("Call Duration (in minutes)", "Call Duration (in minutes)");
			bulkCopy.ColumnMappings.Add("Call Duration (in seconds)", "Call Duration (in seconds)");
			bulkCopy.ColumnMappings.Add("Call Owner", "Call Owner");
			bulkCopy.ColumnMappings.Add("Call Owner Id", "Call Owner Id");
			bulkCopy.ColumnMappings.Add("Call Purpose", "Call Purpose");
			bulkCopy.ColumnMappings.Add("Call Result", "Call Result");
			bulkCopy.ColumnMappings.Add("Call Start Time", "Call Start Time");
			bulkCopy.ColumnMappings.Add("Call Type", "Call Type");
			bulkCopy.ColumnMappings.Add("ContactID", "ContactID");
			bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");
			bulkCopy.ColumnMappings.Add("Created Time", "Created Time");
			bulkCopy.ColumnMappings.Add("LEADID", "LEADID");
			bulkCopy.ColumnMappings.Add("Modified Time", "Modified Time");
			bulkCopy.ColumnMappings.Add("POTENTIALID", "POTENTIALID");
			bulkCopy.ColumnMappings.Add("RELATED To", "RELATED To");
			bulkCopy.ColumnMappings.Add("SEMODULE", "SEMODULE");
			bulkCopy.ColumnMappings.Add("Subject", "Subject");
			bulkCopy.ColumnMappings.Add("TASKID", "TASKID");
			bulkCopy.ColumnMappings.Add("Who Id Id", "Who Id Id");
			bulkCopy.ColumnMappings.Add("CallPK", "CallPK");
			
			foreach(SiH_SalesWorkflow.Entities.ZohoCalls entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["ACCOUNTID"] = entity.Accountid;
							
				
					row["Billable"] = entity.Billable;
							
				
					row["Call Duration"] = entity.CallDuration;
							
				
					row["Call Duration (in minutes)"] = entity.SafeNameCallDurationInMinutes.HasValue ? (object) entity.SafeNameCallDurationInMinutes  : System.DBNull.Value;
							
				
					row["Call Duration (in seconds)"] = entity.SafeNameCallDurationInSeconds.HasValue ? (object) entity.SafeNameCallDurationInSeconds  : System.DBNull.Value;
							
				
					row["Call Owner"] = entity.CallOwner;
							
				
					row["Call Owner Id"] = entity.CallOwnerId;
							
				
					row["Call Purpose"] = entity.CallPurpose;
							
				
					row["Call Result"] = entity.CallResult;
							
				
					row["Call Start Time"] = entity.CallStartTime.HasValue ? (object) entity.CallStartTime  : System.DBNull.Value;
							
				
					row["Call Type"] = entity.CallType;
							
				
					row["ContactID"] = entity.ContactId;
							
				
					row["CreatedBy"] = entity.CreatedBy;
							
				
					row["Created Time"] = entity.CreatedTime.HasValue ? (object) entity.CreatedTime  : System.DBNull.Value;
							
				
					row["LEADID"] = entity.Leadid;
							
				
					row["Modified Time"] = entity.ModifiedTime.HasValue ? (object) entity.ModifiedTime  : System.DBNull.Value;
							
				
					row["POTENTIALID"] = entity.Potentialid;
							
				
					row["RELATED To"] = entity.RelatedTo;
							
				
					row["SEMODULE"] = entity.Semodule;
							
				
					row["Subject"] = entity.Subject;
							
				
					row["TASKID"] = entity.Taskid;
							
				
					row["Who Id Id"] = entity.WhoIdId;
							
				
					row["CallPK"] = entity.CallPk;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(SiH_SalesWorkflow.Entities.ZohoCalls entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a SiH_SalesWorkflow.Entities.ZohoCalls object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">SiH_SalesWorkflow.Entities.ZohoCalls object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the SiH_SalesWorkflow.Entities.ZohoCalls object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, SiH_SalesWorkflow.Entities.ZohoCalls entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoCalls_Insert", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@Accountid", DbType.String, entity.Accountid );
            database.AddInParameter(commandWrapper, "@Billable", DbType.String, entity.Billable );
            database.AddInParameter(commandWrapper, "@CallDuration", DbType.String, entity.CallDuration );
			database.AddInParameter(commandWrapper, "@SafeNameCallDurationInMinutes", DbType.Double, (entity.SafeNameCallDurationInMinutes.HasValue ? (object) entity.SafeNameCallDurationInMinutes  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SafeNameCallDurationInSeconds", DbType.Double, (entity.SafeNameCallDurationInSeconds.HasValue ? (object) entity.SafeNameCallDurationInSeconds  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@CallOwner", DbType.String, entity.CallOwner );
            database.AddInParameter(commandWrapper, "@CallOwnerId", DbType.String, entity.CallOwnerId );
            database.AddInParameter(commandWrapper, "@CallPurpose", DbType.String, entity.CallPurpose );
            database.AddInParameter(commandWrapper, "@CallResult", DbType.String, entity.CallResult );
			database.AddInParameter(commandWrapper, "@CallStartTime", DbType.DateTime, (entity.CallStartTime.HasValue ? (object) entity.CallStartTime  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@CallType", DbType.String, entity.CallType );
            database.AddInParameter(commandWrapper, "@ContactId", DbType.String, entity.ContactId );
            database.AddInParameter(commandWrapper, "@CreatedBy", DbType.String, entity.CreatedBy );
			database.AddInParameter(commandWrapper, "@CreatedTime", DbType.DateTime, (entity.CreatedTime.HasValue ? (object) entity.CreatedTime  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@Leadid", DbType.String, entity.Leadid );
			database.AddInParameter(commandWrapper, "@ModifiedTime", DbType.DateTime, (entity.ModifiedTime.HasValue ? (object) entity.ModifiedTime  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@Potentialid", DbType.String, entity.Potentialid );
            database.AddInParameter(commandWrapper, "@RelatedTo", DbType.String, entity.RelatedTo );
            database.AddInParameter(commandWrapper, "@Semodule", DbType.String, entity.Semodule );
            database.AddInParameter(commandWrapper, "@Subject", DbType.String, entity.Subject );
            database.AddInParameter(commandWrapper, "@Taskid", DbType.String, entity.Taskid );
            database.AddInParameter(commandWrapper, "@WhoIdId", DbType.String, entity.WhoIdId );
			database.AddOutParameter(commandWrapper, "@CallPk", DbType.Int64, 8);
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _callPk = database.GetParameterValue(commandWrapper, "@CallPk");
			entity.CallPk = (System.Int64)_callPk;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">SiH_SalesWorkflow.Entities.ZohoCalls object to update.</param>
		/// <remarks>
		///		After updating the datasource, the SiH_SalesWorkflow.Entities.ZohoCalls object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, SiH_SalesWorkflow.Entities.ZohoCalls entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoCalls_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@Accountid", DbType.String, entity.Accountid );
            database.AddInParameter(commandWrapper, "@Billable", DbType.String, entity.Billable );
            database.AddInParameter(commandWrapper, "@CallDuration", DbType.String, entity.CallDuration );
			database.AddInParameter(commandWrapper, "@SafeNameCallDurationInMinutes", DbType.Double, (entity.SafeNameCallDurationInMinutes.HasValue ? (object) entity.SafeNameCallDurationInMinutes : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SafeNameCallDurationInSeconds", DbType.Double, (entity.SafeNameCallDurationInSeconds.HasValue ? (object) entity.SafeNameCallDurationInSeconds : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@CallOwner", DbType.String, entity.CallOwner );
            database.AddInParameter(commandWrapper, "@CallOwnerId", DbType.String, entity.CallOwnerId );
            database.AddInParameter(commandWrapper, "@CallPurpose", DbType.String, entity.CallPurpose );
            database.AddInParameter(commandWrapper, "@CallResult", DbType.String, entity.CallResult );
			database.AddInParameter(commandWrapper, "@CallStartTime", DbType.DateTime, (entity.CallStartTime.HasValue ? (object) entity.CallStartTime : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@CallType", DbType.String, entity.CallType );
            database.AddInParameter(commandWrapper, "@ContactId", DbType.String, entity.ContactId );
            database.AddInParameter(commandWrapper, "@CreatedBy", DbType.String, entity.CreatedBy );
			database.AddInParameter(commandWrapper, "@CreatedTime", DbType.DateTime, (entity.CreatedTime.HasValue ? (object) entity.CreatedTime : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@Leadid", DbType.String, entity.Leadid );
			database.AddInParameter(commandWrapper, "@ModifiedTime", DbType.DateTime, (entity.ModifiedTime.HasValue ? (object) entity.ModifiedTime : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@Potentialid", DbType.String, entity.Potentialid );
            database.AddInParameter(commandWrapper, "@RelatedTo", DbType.String, entity.RelatedTo );
            database.AddInParameter(commandWrapper, "@Semodule", DbType.String, entity.Semodule );
            database.AddInParameter(commandWrapper, "@Subject", DbType.String, entity.Subject );
            database.AddInParameter(commandWrapper, "@Taskid", DbType.String, entity.Taskid );
            database.AddInParameter(commandWrapper, "@WhoIdId", DbType.String, entity.WhoIdId );
            database.AddInParameter(commandWrapper, "@CallPk", DbType.Int64, entity.CallPk );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
