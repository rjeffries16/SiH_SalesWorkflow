/*
	File Generated by NetTiers templates [www.nettiers.net]
	Generated on : Thursday, May 12, 2016
	Important: Do not modify this file. Edit the file SqlZohoLeadsProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using SiH_SalesWorkflow.Entities;
using SiH_SalesWorkflow.Data;
using SiH_SalesWorkflow.Data.Bases;

#endregion

namespace SiH_SalesWorkflow.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="ZohoLeads"/> entity.
	///</summary>
	public abstract partial class SqlZohoLeadsProviderBase : ZohoLeadsProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlZohoLeadsProviderBase"/> instance.
		/// </summary>
		public SqlZohoLeadsProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlZohoLeadsProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlZohoLeadsProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_leadpk">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int64 _leadpk)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoLeads_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Leadpk", DbType.Int64, _leadpk);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(ZohoLeads)
					,_leadpk);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of SiH_SalesWorkflow.Entities.ZohoLeads objects.</returns>
		public override TList<ZohoLeads> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<ZohoLeads>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoLeads_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@ActivitiesInvolved", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CallsInvolved", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Company", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Converted", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreatedBy", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CreatedTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Email", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EmailOptOut", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@EventsInvolved", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FeaturesOfInterest", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FirstName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SafeNameFirstTimeCallerNewLead", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IfNoLongerInterested", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Industry", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastActivityTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastName", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastVisitedTime", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LeadOwnerId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LeadOwner", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LeadSource", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LeadStatus", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Leadid", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Mobile", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModifiedBy", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ModifiedTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Phone", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Rating", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecondaryEmail", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@State", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SubmissionTime", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SubmittedOn", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TasksInvolved", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TimeZone", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Url", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Website", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Worries", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Leadpk", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Wday811", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Wday112", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Wday25", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Wday58", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sat811", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sat112", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sat25", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sat58", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sun811", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sun112", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sun25", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sun58", DbType.Int32, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("activities involved ") || clause.Trim().StartsWith("activities involved="))
				{
					database.SetParameterValue(commandWrapper, "@ActivitiesInvolved", 
						clause.Trim().Remove(0,19).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("calls involved ") || clause.Trim().StartsWith("calls involved="))
				{
					database.SetParameterValue(commandWrapper, "@CallsInvolved", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("company ") || clause.Trim().StartsWith("company="))
				{
					database.SetParameterValue(commandWrapper, "@Company", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("converted ") || clause.Trim().StartsWith("converted="))
				{
					database.SetParameterValue(commandWrapper, "@Converted", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("created by ") || clause.Trim().StartsWith("created by="))
				{
					database.SetParameterValue(commandWrapper, "@CreatedBy", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("created time ") || clause.Trim().StartsWith("created time="))
				{
					database.SetParameterValue(commandWrapper, "@CreatedTime", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("email ") || clause.Trim().StartsWith("email="))
				{
					database.SetParameterValue(commandWrapper, "@Email", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("email opt out ") || clause.Trim().StartsWith("email opt out="))
				{
					database.SetParameterValue(commandWrapper, "@EmailOptOut", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("events involved ") || clause.Trim().StartsWith("events involved="))
				{
					database.SetParameterValue(commandWrapper, "@EventsInvolved", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("features of interest ") || clause.Trim().StartsWith("features of interest="))
				{
					database.SetParameterValue(commandWrapper, "@FeaturesOfInterest", 
						clause.Trim().Remove(0,20).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("first name ") || clause.Trim().StartsWith("first name="))
				{
					database.SetParameterValue(commandWrapper, "@FirstName", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("first time caller (new lead) ") || clause.Trim().StartsWith("first time caller (new lead)="))
				{
					database.SetParameterValue(commandWrapper, "@SafeNameFirstTimeCallerNewLead", 
						clause.Trim().Remove(0,28).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("if no longer interested ") || clause.Trim().StartsWith("if no longer interested="))
				{
					database.SetParameterValue(commandWrapper, "@IfNoLongerInterested", 
						clause.Trim().Remove(0,23).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("industry ") || clause.Trim().StartsWith("industry="))
				{
					database.SetParameterValue(commandWrapper, "@Industry", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last activity time ") || clause.Trim().StartsWith("last activity time="))
				{
					database.SetParameterValue(commandWrapper, "@LastActivityTime", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last name ") || clause.Trim().StartsWith("last name="))
				{
					database.SetParameterValue(commandWrapper, "@LastName", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last visited time ") || clause.Trim().StartsWith("last visited time="))
				{
					database.SetParameterValue(commandWrapper, "@LastVisitedTime", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lead owner id ") || clause.Trim().StartsWith("lead owner id="))
				{
					database.SetParameterValue(commandWrapper, "@LeadOwnerId", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lead owner ") || clause.Trim().StartsWith("lead owner="))
				{
					database.SetParameterValue(commandWrapper, "@LeadOwner", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lead source ") || clause.Trim().StartsWith("lead source="))
				{
					database.SetParameterValue(commandWrapper, "@LeadSource", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lead status ") || clause.Trim().StartsWith("lead status="))
				{
					database.SetParameterValue(commandWrapper, "@LeadStatus", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("leadid ") || clause.Trim().StartsWith("leadid="))
				{
					database.SetParameterValue(commandWrapper, "@Leadid", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("mobile ") || clause.Trim().StartsWith("mobile="))
				{
					database.SetParameterValue(commandWrapper, "@Mobile", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("modified by ") || clause.Trim().StartsWith("modified by="))
				{
					database.SetParameterValue(commandWrapper, "@ModifiedBy", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("modified time ") || clause.Trim().StartsWith("modified time="))
				{
					database.SetParameterValue(commandWrapper, "@ModifiedTime", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("phone ") || clause.Trim().StartsWith("phone="))
				{
					database.SetParameterValue(commandWrapper, "@Phone", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("rating ") || clause.Trim().StartsWith("rating="))
				{
					database.SetParameterValue(commandWrapper, "@Rating", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("secondary email ") || clause.Trim().StartsWith("secondary email="))
				{
					database.SetParameterValue(commandWrapper, "@SecondaryEmail", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("state ") || clause.Trim().StartsWith("state="))
				{
					database.SetParameterValue(commandWrapper, "@State", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("submission time ") || clause.Trim().StartsWith("submission time="))
				{
					database.SetParameterValue(commandWrapper, "@SubmissionTime", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("submitted on ") || clause.Trim().StartsWith("submitted on="))
				{
					database.SetParameterValue(commandWrapper, "@SubmittedOn", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tasks involved ") || clause.Trim().StartsWith("tasks involved="))
				{
					database.SetParameterValue(commandWrapper, "@TasksInvolved", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("time zone ") || clause.Trim().StartsWith("time zone="))
				{
					database.SetParameterValue(commandWrapper, "@TimeZone", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("url ") || clause.Trim().StartsWith("url="))
				{
					database.SetParameterValue(commandWrapper, "@Url", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("website ") || clause.Trim().StartsWith("website="))
				{
					database.SetParameterValue(commandWrapper, "@Website", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("worries ") || clause.Trim().StartsWith("worries="))
				{
					database.SetParameterValue(commandWrapper, "@Worries", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("leadpk ") || clause.Trim().StartsWith("leadpk="))
				{
					database.SetParameterValue(commandWrapper, "@Leadpk", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wday8-11 ") || clause.Trim().StartsWith("wday8-11="))
				{
					database.SetParameterValue(commandWrapper, "@Wday811", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wday11-2 ") || clause.Trim().StartsWith("wday11-2="))
				{
					database.SetParameterValue(commandWrapper, "@Wday112", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wday2-5 ") || clause.Trim().StartsWith("wday2-5="))
				{
					database.SetParameterValue(commandWrapper, "@Wday25", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("wday5-8 ") || clause.Trim().StartsWith("wday5-8="))
				{
					database.SetParameterValue(commandWrapper, "@Wday58", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sat8-11 ") || clause.Trim().StartsWith("sat8-11="))
				{
					database.SetParameterValue(commandWrapper, "@Sat811", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sat11-2 ") || clause.Trim().StartsWith("sat11-2="))
				{
					database.SetParameterValue(commandWrapper, "@Sat112", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sat2-5 ") || clause.Trim().StartsWith("sat2-5="))
				{
					database.SetParameterValue(commandWrapper, "@Sat25", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sat5-8 ") || clause.Trim().StartsWith("sat5-8="))
				{
					database.SetParameterValue(commandWrapper, "@Sat58", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sun8-11 ") || clause.Trim().StartsWith("sun8-11="))
				{
					database.SetParameterValue(commandWrapper, "@Sun811", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sun11-2 ") || clause.Trim().StartsWith("sun11-2="))
				{
					database.SetParameterValue(commandWrapper, "@Sun112", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sun2-5 ") || clause.Trim().StartsWith("sun2-5="))
				{
					database.SetParameterValue(commandWrapper, "@Sun25", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sun5-8 ") || clause.Trim().StartsWith("sun5-8="))
				{
					database.SetParameterValue(commandWrapper, "@Sun58", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<ZohoLeads> rows = new TList<ZohoLeads>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of SiH_SalesWorkflow.Entities.ZohoLeads objects.</returns>
		public override TList<ZohoLeads> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoLeads_Find_Dynamic", typeof(ZohoLeadsColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<ZohoLeads> rows = new TList<ZohoLeads>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SiH_SalesWorkflow.Entities.ZohoLeads objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ZohoLeads> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoLeads_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<ZohoLeads> rows = new TList<ZohoLeads>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of SiH_SalesWorkflow.Entities.ZohoLeads objects.</returns>
		public override TList<ZohoLeads> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoLeads_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<ZohoLeads> rows = new TList<ZohoLeads>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByLeadid
					
		/// <summary>
		/// 	Gets rows from the datasource based on the LEADIDINDEX index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_leadid"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="TList&lt;ZohoLeads&gt;"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ZohoLeads> GetByLeadid(TransactionManager transactionManager, System.String _leadid, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoLeads_GetByLeadid", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Leadid", DbType.String, _leadid);
			
			IDataReader reader = null;
			TList<ZohoLeads> tmp = new TList<ZohoLeads>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLeadid", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLeadid", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			return tmp;
			
			//return rows;
		}
		
		#endregion


		#region GetByLeadpk
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ZohoLeads index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_leadpk"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="SiH_SalesWorkflow.Entities.ZohoLeads"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override SiH_SalesWorkflow.Entities.ZohoLeads GetByLeadpk(TransactionManager transactionManager, System.Int64 _leadpk, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoLeads_GetByLeadpk", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Leadpk", DbType.Int64, _leadpk);
			
			IDataReader reader = null;
			TList<ZohoLeads> tmp = new TList<ZohoLeads>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByLeadpk", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByLeadpk", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the SiH_SalesWorkflow.Entities.ZohoLeads object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<SiH_SalesWorkflow.Entities.ZohoLeads> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ZohoLeads";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("Activities Involved", typeof(System.Boolean));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("Calls Involved", typeof(System.Boolean));
			col1.AllowDBNull = false;		
			DataColumn col2 = dataTable.Columns.Add("Company", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("CONVERTED", typeof(System.Boolean));
			col3.AllowDBNull = false;		
			DataColumn col4 = dataTable.Columns.Add("Created By", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("Created Time", typeof(System.DateTime));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("Email", typeof(System.String));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("Email Opt Out", typeof(System.Boolean));
			col7.AllowDBNull = false;		
			DataColumn col8 = dataTable.Columns.Add("Events Involved", typeof(System.Boolean));
			col8.AllowDBNull = false;		
			DataColumn col9 = dataTable.Columns.Add("Features of Interest", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("First Name", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("First Time Caller (new lead)", typeof(System.Boolean));
			col11.AllowDBNull = false;		
			DataColumn col12 = dataTable.Columns.Add("If No Longer Interested", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("Industry", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("Last Activity Time", typeof(System.DateTime));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("Last Name", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("Last Visited Time", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("Lead Owner Id", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("Lead Owner", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("Lead Source", typeof(System.String));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("Lead Status", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("LEADID", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("Mobile", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("Modified By", typeof(System.String));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("Modified Time", typeof(System.DateTime));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("Phone", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("Rating", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("Secondary Email", typeof(System.String));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("State", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("Submission Time", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("Submitted On", typeof(System.DateTime));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("Tasks Involved", typeof(System.Boolean));
			col31.AllowDBNull = false;		
			DataColumn col32 = dataTable.Columns.Add("Time Zone", typeof(System.String));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("URL", typeof(System.String));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("Website", typeof(System.String));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("Worries", typeof(System.String));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("LEADPK", typeof(System.Int64));
			col36.AllowDBNull = false;		
			DataColumn col37 = dataTable.Columns.Add("WDay8-11", typeof(System.Int32));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("WDay11-2", typeof(System.Int32));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("WDay2-5", typeof(System.Int32));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("WDay5-8", typeof(System.Int32));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("Sat8-11", typeof(System.Int32));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("Sat11-2", typeof(System.Int32));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("Sat2-5", typeof(System.Int32));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("Sat5-8", typeof(System.Int32));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("Sun8-11", typeof(System.Int32));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("Sun11-2", typeof(System.Int32));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("Sun2-5", typeof(System.Int32));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("Sun5-8", typeof(System.Int32));
			col48.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("Activities Involved", "Activities Involved");
			bulkCopy.ColumnMappings.Add("Calls Involved", "Calls Involved");
			bulkCopy.ColumnMappings.Add("Company", "Company");
			bulkCopy.ColumnMappings.Add("CONVERTED", "CONVERTED");
			bulkCopy.ColumnMappings.Add("Created By", "Created By");
			bulkCopy.ColumnMappings.Add("Created Time", "Created Time");
			bulkCopy.ColumnMappings.Add("Email", "Email");
			bulkCopy.ColumnMappings.Add("Email Opt Out", "Email Opt Out");
			bulkCopy.ColumnMappings.Add("Events Involved", "Events Involved");
			bulkCopy.ColumnMappings.Add("Features of Interest", "Features of Interest");
			bulkCopy.ColumnMappings.Add("First Name", "First Name");
			bulkCopy.ColumnMappings.Add("First Time Caller (new lead)", "First Time Caller (new lead)");
			bulkCopy.ColumnMappings.Add("If No Longer Interested", "If No Longer Interested");
			bulkCopy.ColumnMappings.Add("Industry", "Industry");
			bulkCopy.ColumnMappings.Add("Last Activity Time", "Last Activity Time");
			bulkCopy.ColumnMappings.Add("Last Name", "Last Name");
			bulkCopy.ColumnMappings.Add("Last Visited Time", "Last Visited Time");
			bulkCopy.ColumnMappings.Add("Lead Owner Id", "Lead Owner Id");
			bulkCopy.ColumnMappings.Add("Lead Owner", "Lead Owner");
			bulkCopy.ColumnMappings.Add("Lead Source", "Lead Source");
			bulkCopy.ColumnMappings.Add("Lead Status", "Lead Status");
			bulkCopy.ColumnMappings.Add("LEADID", "LEADID");
			bulkCopy.ColumnMappings.Add("Mobile", "Mobile");
			bulkCopy.ColumnMappings.Add("Modified By", "Modified By");
			bulkCopy.ColumnMappings.Add("Modified Time", "Modified Time");
			bulkCopy.ColumnMappings.Add("Phone", "Phone");
			bulkCopy.ColumnMappings.Add("Rating", "Rating");
			bulkCopy.ColumnMappings.Add("Secondary Email", "Secondary Email");
			bulkCopy.ColumnMappings.Add("State", "State");
			bulkCopy.ColumnMappings.Add("Submission Time", "Submission Time");
			bulkCopy.ColumnMappings.Add("Submitted On", "Submitted On");
			bulkCopy.ColumnMappings.Add("Tasks Involved", "Tasks Involved");
			bulkCopy.ColumnMappings.Add("Time Zone", "Time Zone");
			bulkCopy.ColumnMappings.Add("URL", "URL");
			bulkCopy.ColumnMappings.Add("Website", "Website");
			bulkCopy.ColumnMappings.Add("Worries", "Worries");
			bulkCopy.ColumnMappings.Add("LEADPK", "LEADPK");
			bulkCopy.ColumnMappings.Add("WDay8-11", "WDay8-11");
			bulkCopy.ColumnMappings.Add("WDay11-2", "WDay11-2");
			bulkCopy.ColumnMappings.Add("WDay2-5", "WDay2-5");
			bulkCopy.ColumnMappings.Add("WDay5-8", "WDay5-8");
			bulkCopy.ColumnMappings.Add("Sat8-11", "Sat8-11");
			bulkCopy.ColumnMappings.Add("Sat11-2", "Sat11-2");
			bulkCopy.ColumnMappings.Add("Sat2-5", "Sat2-5");
			bulkCopy.ColumnMappings.Add("Sat5-8", "Sat5-8");
			bulkCopy.ColumnMappings.Add("Sun8-11", "Sun8-11");
			bulkCopy.ColumnMappings.Add("Sun11-2", "Sun11-2");
			bulkCopy.ColumnMappings.Add("Sun2-5", "Sun2-5");
			bulkCopy.ColumnMappings.Add("Sun5-8", "Sun5-8");
			
			foreach(SiH_SalesWorkflow.Entities.ZohoLeads entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["Activities Involved"] = entity.ActivitiesInvolved;
							
				
					row["Calls Involved"] = entity.CallsInvolved;
							
				
					row["Company"] = entity.Company;
							
				
					row["CONVERTED"] = entity.Converted;
							
				
					row["Created By"] = entity.CreatedBy;
							
				
					row["Created Time"] = entity.CreatedTime.HasValue ? (object) entity.CreatedTime  : System.DBNull.Value;
							
				
					row["Email"] = entity.Email;
							
				
					row["Email Opt Out"] = entity.EmailOptOut;
							
				
					row["Events Involved"] = entity.EventsInvolved;
							
				
					row["Features of Interest"] = entity.FeaturesOfInterest;
							
				
					row["First Name"] = entity.FirstName;
							
				
					row["First Time Caller (new lead)"] = entity.SafeNameFirstTimeCallerNewLead;
							
				
					row["If No Longer Interested"] = entity.IfNoLongerInterested;
							
				
					row["Industry"] = entity.Industry;
							
				
					row["Last Activity Time"] = entity.LastActivityTime.HasValue ? (object) entity.LastActivityTime  : System.DBNull.Value;
							
				
					row["Last Name"] = entity.LastName;
							
				
					row["Last Visited Time"] = entity.LastVisitedTime;
							
				
					row["Lead Owner Id"] = entity.LeadOwnerId;
							
				
					row["Lead Owner"] = entity.LeadOwner;
							
				
					row["Lead Source"] = entity.LeadSource;
							
				
					row["Lead Status"] = entity.LeadStatus;
							
				
					row["LEADID"] = entity.Leadid;
							
				
					row["Mobile"] = entity.Mobile;
							
				
					row["Modified By"] = entity.ModifiedBy;
							
				
					row["Modified Time"] = entity.ModifiedTime.HasValue ? (object) entity.ModifiedTime  : System.DBNull.Value;
							
				
					row["Phone"] = entity.Phone;
							
				
					row["Rating"] = entity.Rating;
							
				
					row["Secondary Email"] = entity.SecondaryEmail;
							
				
					row["State"] = entity.State;
							
				
					row["Submission Time"] = entity.SubmissionTime;
							
				
					row["Submitted On"] = entity.SubmittedOn.HasValue ? (object) entity.SubmittedOn  : System.DBNull.Value;
							
				
					row["Tasks Involved"] = entity.TasksInvolved;
							
				
					row["Time Zone"] = entity.TimeZone;
							
				
					row["URL"] = entity.Url;
							
				
					row["Website"] = entity.Website;
							
				
					row["Worries"] = entity.Worries;
							
				
					row["LEADPK"] = entity.Leadpk;
							
				
					row["WDay8-11"] = entity.Wday811.HasValue ? (object) entity.Wday811  : System.DBNull.Value;
							
				
					row["WDay11-2"] = entity.Wday112.HasValue ? (object) entity.Wday112  : System.DBNull.Value;
							
				
					row["WDay2-5"] = entity.Wday25.HasValue ? (object) entity.Wday25  : System.DBNull.Value;
							
				
					row["WDay5-8"] = entity.Wday58.HasValue ? (object) entity.Wday58  : System.DBNull.Value;
							
				
					row["Sat8-11"] = entity.Sat811.HasValue ? (object) entity.Sat811  : System.DBNull.Value;
							
				
					row["Sat11-2"] = entity.Sat112.HasValue ? (object) entity.Sat112  : System.DBNull.Value;
							
				
					row["Sat2-5"] = entity.Sat25.HasValue ? (object) entity.Sat25  : System.DBNull.Value;
							
				
					row["Sat5-8"] = entity.Sat58.HasValue ? (object) entity.Sat58  : System.DBNull.Value;
							
				
					row["Sun8-11"] = entity.Sun811.HasValue ? (object) entity.Sun811  : System.DBNull.Value;
							
				
					row["Sun11-2"] = entity.Sun112.HasValue ? (object) entity.Sun112  : System.DBNull.Value;
							
				
					row["Sun2-5"] = entity.Sun25.HasValue ? (object) entity.Sun25  : System.DBNull.Value;
							
				
					row["Sun5-8"] = entity.Sun58.HasValue ? (object) entity.Sun58  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(SiH_SalesWorkflow.Entities.ZohoLeads entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a SiH_SalesWorkflow.Entities.ZohoLeads object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">SiH_SalesWorkflow.Entities.ZohoLeads object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the SiH_SalesWorkflow.Entities.ZohoLeads object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, SiH_SalesWorkflow.Entities.ZohoLeads entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoLeads_Insert", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@ActivitiesInvolved", DbType.Boolean, entity.ActivitiesInvolved );
            database.AddInParameter(commandWrapper, "@CallsInvolved", DbType.Boolean, entity.CallsInvolved );
            database.AddInParameter(commandWrapper, "@Company", DbType.String, entity.Company );
            database.AddInParameter(commandWrapper, "@Converted", DbType.Boolean, entity.Converted );
            database.AddInParameter(commandWrapper, "@CreatedBy", DbType.String, entity.CreatedBy );
			database.AddInParameter(commandWrapper, "@CreatedTime", DbType.DateTime, (entity.CreatedTime.HasValue ? (object) entity.CreatedTime  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@Email", DbType.String, entity.Email );
            database.AddInParameter(commandWrapper, "@EmailOptOut", DbType.Boolean, entity.EmailOptOut );
            database.AddInParameter(commandWrapper, "@EventsInvolved", DbType.Boolean, entity.EventsInvolved );
            database.AddInParameter(commandWrapper, "@FeaturesOfInterest", DbType.String, entity.FeaturesOfInterest );
            database.AddInParameter(commandWrapper, "@FirstName", DbType.String, entity.FirstName );
            database.AddInParameter(commandWrapper, "@SafeNameFirstTimeCallerNewLead", DbType.Boolean, entity.SafeNameFirstTimeCallerNewLead );
            database.AddInParameter(commandWrapper, "@IfNoLongerInterested", DbType.String, entity.IfNoLongerInterested );
            database.AddInParameter(commandWrapper, "@Industry", DbType.String, entity.Industry );
			database.AddInParameter(commandWrapper, "@LastActivityTime", DbType.DateTime, (entity.LastActivityTime.HasValue ? (object) entity.LastActivityTime  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@LastName", DbType.String, entity.LastName );
            database.AddInParameter(commandWrapper, "@LastVisitedTime", DbType.String, entity.LastVisitedTime );
            database.AddInParameter(commandWrapper, "@LeadOwnerId", DbType.String, entity.LeadOwnerId );
            database.AddInParameter(commandWrapper, "@LeadOwner", DbType.String, entity.LeadOwner );
            database.AddInParameter(commandWrapper, "@LeadSource", DbType.String, entity.LeadSource );
            database.AddInParameter(commandWrapper, "@LeadStatus", DbType.String, entity.LeadStatus );
            database.AddInParameter(commandWrapper, "@Leadid", DbType.String, entity.Leadid );
            database.AddInParameter(commandWrapper, "@Mobile", DbType.String, entity.Mobile );
            database.AddInParameter(commandWrapper, "@ModifiedBy", DbType.String, entity.ModifiedBy );
			database.AddInParameter(commandWrapper, "@ModifiedTime", DbType.DateTime, (entity.ModifiedTime.HasValue ? (object) entity.ModifiedTime  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@Phone", DbType.String, entity.Phone );
            database.AddInParameter(commandWrapper, "@Rating", DbType.String, entity.Rating );
            database.AddInParameter(commandWrapper, "@SecondaryEmail", DbType.String, entity.SecondaryEmail );
            database.AddInParameter(commandWrapper, "@State", DbType.String, entity.State );
            database.AddInParameter(commandWrapper, "@SubmissionTime", DbType.String, entity.SubmissionTime );
			database.AddInParameter(commandWrapper, "@SubmittedOn", DbType.DateTime, (entity.SubmittedOn.HasValue ? (object) entity.SubmittedOn  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@TasksInvolved", DbType.Boolean, entity.TasksInvolved );
            database.AddInParameter(commandWrapper, "@TimeZone", DbType.String, entity.TimeZone );
            database.AddInParameter(commandWrapper, "@Url", DbType.String, entity.Url );
            database.AddInParameter(commandWrapper, "@Website", DbType.String, entity.Website );
            database.AddInParameter(commandWrapper, "@Worries", DbType.String, entity.Worries );
			database.AddOutParameter(commandWrapper, "@Leadpk", DbType.Int64, 8);
			database.AddInParameter(commandWrapper, "@Wday811", DbType.Int32, (entity.Wday811.HasValue ? (object) entity.Wday811  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Wday112", DbType.Int32, (entity.Wday112.HasValue ? (object) entity.Wday112  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Wday25", DbType.Int32, (entity.Wday25.HasValue ? (object) entity.Wday25  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Wday58", DbType.Int32, (entity.Wday58.HasValue ? (object) entity.Wday58  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sat811", DbType.Int32, (entity.Sat811.HasValue ? (object) entity.Sat811  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sat112", DbType.Int32, (entity.Sat112.HasValue ? (object) entity.Sat112  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sat25", DbType.Int32, (entity.Sat25.HasValue ? (object) entity.Sat25  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sat58", DbType.Int32, (entity.Sat58.HasValue ? (object) entity.Sat58  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sun811", DbType.Int32, (entity.Sun811.HasValue ? (object) entity.Sun811  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sun112", DbType.Int32, (entity.Sun112.HasValue ? (object) entity.Sun112  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sun25", DbType.Int32, (entity.Sun25.HasValue ? (object) entity.Sun25  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sun58", DbType.Int32, (entity.Sun58.HasValue ? (object) entity.Sun58  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _leadpk = database.GetParameterValue(commandWrapper, "@Leadpk");
			entity.Leadpk = (System.Int64)_leadpk;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">SiH_SalesWorkflow.Entities.ZohoLeads object to update.</param>
		/// <remarks>
		///		After updating the datasource, the SiH_SalesWorkflow.Entities.ZohoLeads object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, SiH_SalesWorkflow.Entities.ZohoLeads entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ZohoLeads_Update", _useStoredProcedure);
			
            database.AddInParameter(commandWrapper, "@ActivitiesInvolved", DbType.Boolean, entity.ActivitiesInvolved );
            database.AddInParameter(commandWrapper, "@CallsInvolved", DbType.Boolean, entity.CallsInvolved );
            database.AddInParameter(commandWrapper, "@Company", DbType.String, entity.Company );
            database.AddInParameter(commandWrapper, "@Converted", DbType.Boolean, entity.Converted );
            database.AddInParameter(commandWrapper, "@CreatedBy", DbType.String, entity.CreatedBy );
			database.AddInParameter(commandWrapper, "@CreatedTime", DbType.DateTime, (entity.CreatedTime.HasValue ? (object) entity.CreatedTime : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@Email", DbType.String, entity.Email );
            database.AddInParameter(commandWrapper, "@EmailOptOut", DbType.Boolean, entity.EmailOptOut );
            database.AddInParameter(commandWrapper, "@EventsInvolved", DbType.Boolean, entity.EventsInvolved );
            database.AddInParameter(commandWrapper, "@FeaturesOfInterest", DbType.String, entity.FeaturesOfInterest );
            database.AddInParameter(commandWrapper, "@FirstName", DbType.String, entity.FirstName );
            database.AddInParameter(commandWrapper, "@SafeNameFirstTimeCallerNewLead", DbType.Boolean, entity.SafeNameFirstTimeCallerNewLead );
            database.AddInParameter(commandWrapper, "@IfNoLongerInterested", DbType.String, entity.IfNoLongerInterested );
            database.AddInParameter(commandWrapper, "@Industry", DbType.String, entity.Industry );
			database.AddInParameter(commandWrapper, "@LastActivityTime", DbType.DateTime, (entity.LastActivityTime.HasValue ? (object) entity.LastActivityTime : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@LastName", DbType.String, entity.LastName );
            database.AddInParameter(commandWrapper, "@LastVisitedTime", DbType.String, entity.LastVisitedTime );
            database.AddInParameter(commandWrapper, "@LeadOwnerId", DbType.String, entity.LeadOwnerId );
            database.AddInParameter(commandWrapper, "@LeadOwner", DbType.String, entity.LeadOwner );
            database.AddInParameter(commandWrapper, "@LeadSource", DbType.String, entity.LeadSource );
            database.AddInParameter(commandWrapper, "@LeadStatus", DbType.String, entity.LeadStatus );
            database.AddInParameter(commandWrapper, "@Leadid", DbType.String, entity.Leadid );
            database.AddInParameter(commandWrapper, "@Mobile", DbType.String, entity.Mobile );
            database.AddInParameter(commandWrapper, "@ModifiedBy", DbType.String, entity.ModifiedBy );
			database.AddInParameter(commandWrapper, "@ModifiedTime", DbType.DateTime, (entity.ModifiedTime.HasValue ? (object) entity.ModifiedTime : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@Phone", DbType.String, entity.Phone );
            database.AddInParameter(commandWrapper, "@Rating", DbType.String, entity.Rating );
            database.AddInParameter(commandWrapper, "@SecondaryEmail", DbType.String, entity.SecondaryEmail );
            database.AddInParameter(commandWrapper, "@State", DbType.String, entity.State );
            database.AddInParameter(commandWrapper, "@SubmissionTime", DbType.String, entity.SubmissionTime );
			database.AddInParameter(commandWrapper, "@SubmittedOn", DbType.DateTime, (entity.SubmittedOn.HasValue ? (object) entity.SubmittedOn : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@TasksInvolved", DbType.Boolean, entity.TasksInvolved );
            database.AddInParameter(commandWrapper, "@TimeZone", DbType.String, entity.TimeZone );
            database.AddInParameter(commandWrapper, "@Url", DbType.String, entity.Url );
            database.AddInParameter(commandWrapper, "@Website", DbType.String, entity.Website );
            database.AddInParameter(commandWrapper, "@Worries", DbType.String, entity.Worries );
            database.AddInParameter(commandWrapper, "@Leadpk", DbType.Int64, entity.Leadpk );
			database.AddInParameter(commandWrapper, "@Wday811", DbType.Int32, (entity.Wday811.HasValue ? (object) entity.Wday811 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Wday112", DbType.Int32, (entity.Wday112.HasValue ? (object) entity.Wday112 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Wday25", DbType.Int32, (entity.Wday25.HasValue ? (object) entity.Wday25 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Wday58", DbType.Int32, (entity.Wday58.HasValue ? (object) entity.Wday58 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sat811", DbType.Int32, (entity.Sat811.HasValue ? (object) entity.Sat811 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sat112", DbType.Int32, (entity.Sat112.HasValue ? (object) entity.Sat112 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sat25", DbType.Int32, (entity.Sat25.HasValue ? (object) entity.Sat25 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sat58", DbType.Int32, (entity.Sat58.HasValue ? (object) entity.Sat58 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sun811", DbType.Int32, (entity.Sun811.HasValue ? (object) entity.Sun811 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sun112", DbType.Int32, (entity.Sun112.HasValue ? (object) entity.Sun112 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sun25", DbType.Int32, (entity.Sun25.HasValue ? (object) entity.Sun25 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sun58", DbType.Int32, (entity.Sun58.HasValue ? (object) entity.Sun58 : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
