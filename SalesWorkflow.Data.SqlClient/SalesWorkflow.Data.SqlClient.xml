<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SalesWorkflow.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwAllLeadsWithCallsAndPeriods"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwAllLeadsWithCallsAndPeriods objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwAllLeadsWithCallsAndPeriods objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwAllLeadsWithCallsAndPeriods objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwAllLeadsWithCallsAndPeriods objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwAllLeadsWithCallsAndPeriodsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadContactInFuture"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwBaseLeadContactInFuture objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadContactInFuture objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadContactInFuture objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwBaseLeadContactInFuture objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadContactInFutureProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetLessThanThreeCallsInPeriod"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwBaseLeadGetLessThanThreeCallsInPeriod objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetLessThanThreeCallsInPeriod objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetLessThanThreeCallsInPeriod objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwBaseLeadGetLessThanThreeCallsInPeriod objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetLessThanTwoCallsInPeriod"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwBaseLeadGetLessThanTwoCallsInPeriod objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetLessThanTwoCallsInPeriod objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetLessThanTwoCallsInPeriod objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwBaseLeadGetLessThanTwoCallsInPeriod objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetWithNoActivityIn60Days"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwBaseLeadGetWithNoActivityIn60Days objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetWithNoActivityIn60Days objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetWithNoActivityIn60Days objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwBaseLeadGetWithNoActivityIn60Days objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityIn60DaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetWithNoActivityInNdays"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwBaseLeadGetWithNoActivityInNdays objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetWithNoActivityInNdays objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetWithNoActivityInNdays objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwBaseLeadGetWithNoActivityInNdays objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetWithNoActivityInNdaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetZeroCallsInPeriod"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwBaseLeadGetZeroCallsInPeriod objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetZeroCallsInPeriod objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwBaseLeadGetZeroCallsInPeriod objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwBaseLeadGetZeroCallsInPeriod objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwBaseLeadGetZeroCallsInPeriodProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwCallableLeadsWithCalls"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwCallableLeadsWithCalls objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallableLeadsWithCalls objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallableLeadsWithCalls objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwCallableLeadsWithCalls objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwCallableLeadsWithCallsAndHourAdj"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwCallableLeadsWithCallsAndHourAdj objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallableLeadsWithCallsAndHourAdj objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallableLeadsWithCallsAndHourAdj objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwCallableLeadsWithCallsAndHourAdj objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndHourAdjProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwCallableLeadsWithCallsAndPeriod"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwCallableLeadsWithCallsAndPeriod objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallableLeadsWithCallsAndPeriod objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallableLeadsWithCallsAndPeriod objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwCallableLeadsWithCallsAndPeriod objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwCallableLeadsWithCallsAndPeriods"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwCallableLeadsWithCallsAndPeriods objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallableLeadsWithCallsAndPeriods objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallableLeadsWithCallsAndPeriods objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwCallableLeadsWithCallsAndPeriods objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallableLeadsWithCallsAndPeriodsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwCallsByUser"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwCallsByUser objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallsByUser objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwCallsByUser objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwCallsByUser objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwCallsByUserProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwDeferedLeads"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwDeferedLeads objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwDeferedLeads objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwDeferedLeads objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwDeferedLeads objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwDeferedLeadsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwHoldAndCallWithLeadInfo"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwHoldAndCallWithLeadInfo objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwHoldAndCallWithLeadInfo objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwHoldAndCallWithLeadInfo objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwHoldAndCallWithLeadInfo objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwHoldAndCallWithLeadInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLastCallCreated"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLastCallCreated objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLastCallCreated objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLastCallCreated objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLastCallCreated objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLastCallCreatedProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLastEmailCreated"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLastEmailCreated objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLastEmailCreated objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLastEmailCreated objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLastEmailCreated objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLastEmailCreatedProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadCallCounts"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadCallCounts objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadCallCounts objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadCallCounts objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadCallCounts objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadCallCountsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadContactTool"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadContactTool objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadContactTool objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadContactTool objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadContactTool objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadContactToolComplete"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadContactToolComplete objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadContactToolComplete objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadContactToolComplete objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadContactToolComplete objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadContactToolCompleteProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadGet"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadGet objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGet objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGet objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadGet objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadGetAlex"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadGetAlex objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetAlex objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetAlex objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadGetAlex objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetAlexProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadGetCraig"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadGetCraig objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetCraig objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetCraig objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadGetCraig objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetCraigProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadGetJenn"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadGetJenn objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetJenn objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetJenn objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadGetJenn objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJennProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadGetJoEllen"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadGetJoEllen objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetJoEllen objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetJoEllen objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadGetJoEllen objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetJoEllenProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadGetNext"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadGetNext objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetNext objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetNext objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadGetNext objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetNextProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadGetRichard"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadGetRichard objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetRichard objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadGetRichard objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadGetRichard objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadGetRichardProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadHoldAndCall"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadHoldAndCall objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadHoldAndCall objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadHoldAndCall objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadHoldAndCall objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadHoldAndCallProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadsAndCalls"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadsAndCalls objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadsAndCalls objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadsAndCalls objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadsAndCalls objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsAndCallsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadsWithAllStatus"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadsWithAllStatus objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadsWithAllStatus objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadsWithAllStatus objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadsWithAllStatus objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithAllStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwLeadsWithCallableStatus"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwLeadsWithCallableStatus objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadsWithCallableStatus objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwLeadsWithCallableStatus objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwLeadsWithCallableStatus objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwLeadsWithCallableStatusProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwManualReturnsList"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwManualReturnsList objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwManualReturnsList objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwManualReturnsList objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwManualReturnsList objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwManualReturnsListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwManualSalesList"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwManualSalesList objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwManualSalesList objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwManualSalesList objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwManualSalesList objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwManualSalesListProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwMaxLeadHoldAndCall"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwMaxLeadHoldAndCall objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwMaxLeadHoldAndCall objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwMaxLeadHoldAndCall objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwMaxLeadHoldAndCall objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwMaxLeadHoldAndCallProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwReportingLeadsAndSalesBoard"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwReportingLeadsAndSalesBoard objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwReportingLeadsAndSalesBoard objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwReportingLeadsAndSalesBoard objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwReportingLeadsAndSalesBoard objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwReportingLeadsAndSalesBoardProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwReportingSalesInfo"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwReportingSalesInfo objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwReportingSalesInfo objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwReportingSalesInfo objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwReportingSalesInfo objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwReportingSalesInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwReportingZohoCallsConnectedAfterDate"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwReportingZohoCallsConnectedAfterDate objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwReportingZohoCallsConnectedAfterDate objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwReportingZohoCallsConnectedAfterDate objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwReportingZohoCallsConnectedAfterDate objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwReportingZohoCallsConnectedAfterDateProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwSalesStats"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwSalesStats objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwSalesStats objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwSalesStats objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwSalesStats objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwSalesStatsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwZohoCalls"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwZohoCalls objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoCalls objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoCalls objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwZohoCalls objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoCallsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwZohoLeads"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwZohoLeads objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeads objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeads objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwZohoLeads objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwZohoLeadsNeedingActionToday"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwZohoLeadsNeedingActionToday objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeadsNeedingActionToday objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeadsNeedingActionToday objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwZohoLeadsNeedingActionToday objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsNeedingActionTodayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwZohoLeadsWithLocalTime"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwZohoLeadsWithLocalTime objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeadsWithLocalTime objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeadsWithLocalTime objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwZohoLeadsWithLocalTime objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwZohoLeadsWithLocalTimeNoActionToday"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwZohoLeadsWithLocalTimeNoActionToday objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeadsWithLocalTimeNoActionToday objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeadsWithLocalTimeNoActionToday objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwZohoLeadsWithLocalTimeNoActionToday objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.VwZohoLeadsWithLocalTimeNoActionTodayCallable"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase">
            <summary>
            This class is the base repository for the CRUD operations on the VwZohoLeadsWithLocalTimeNoActionTodayCallable objects.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeadsWithLocalTimeNoActionTodayCallable objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase.Get(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of VwZohoLeadsWithLocalTimeNoActionTodayCallable objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of VwZohoLeadsWithLocalTimeNoActionTodayCallable objects.</returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlLeadContactedProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.LeadContacted"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.LeadContacted"/> entity.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.Delete(SalesWorkflow.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_leadContactedPk">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.Find(SalesWorkflow.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.LeadContacted objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SalesWorkflow.Entities.LeadContacted objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.LeadContacted objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.GetPaged(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.LeadContacted objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.GetByLeadContactedPk(SalesWorkflow.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LeadContactedPK index.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="_leadContactedPk"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SalesWorkflow.Entities.LeadContacted"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.BulkInsert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.TList{SalesWorkflow.Entities.LeadContacted})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.LeadContacted object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.Insert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.LeadContacted)">
            <summary>
            	Inserts a SalesWorkflow.Entities.LeadContacted object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.LeadContacted object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.LeadContacted object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.Update(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.LeadContacted)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.LeadContacted object to update.</param>
            <remarks>
            	After updating the datasource, the SalesWorkflow.Entities.LeadContacted object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlLeadContactedProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadContactedProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlLeadContactedProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.LeadHoldAndCall"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.LeadHoldAndCall"/> entity.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.Delete(SalesWorkflow.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_leadHoldAndCallPk">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.Find(SalesWorkflow.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.LeadHoldAndCall objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SalesWorkflow.Entities.LeadHoldAndCall objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.LeadHoldAndCall objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.GetPaged(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.LeadHoldAndCall objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.GetByLeadHoldAndCallPk(SalesWorkflow.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LeadHoldAndCall index.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="_leadHoldAndCallPk"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SalesWorkflow.Entities.LeadHoldAndCall"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.BulkInsert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.TList{SalesWorkflow.Entities.LeadHoldAndCall})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.LeadHoldAndCall object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.Insert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.LeadHoldAndCall)">
            <summary>
            	Inserts a SalesWorkflow.Entities.LeadHoldAndCall object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.LeadHoldAndCall object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.LeadHoldAndCall object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.Update(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.LeadHoldAndCall)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.LeadHoldAndCall object to update.</param>
            <remarks>
            	After updating the datasource, the SalesWorkflow.Entities.LeadHoldAndCall object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlLeadHoldAndCallProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlZohoCallsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.ZohoCalls"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.ZohoCalls"/> entity.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.Delete(SalesWorkflow.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_callPk">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.Find(SalesWorkflow.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoCalls objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoCalls objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoCalls objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.GetPaged(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoCalls objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.GetByCallPk(SalesWorkflow.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZohoCalls index.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="_callPk"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SalesWorkflow.Entities.ZohoCalls"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.GetByLeadid(SalesWorkflow.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the ZohoCallsLeadID index.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="_leadid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SalesWorkflow.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.BulkInsert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.TList{SalesWorkflow.Entities.ZohoCalls})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.ZohoCalls object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.Insert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.ZohoCalls)">
            <summary>
            	Inserts a SalesWorkflow.Entities.ZohoCalls object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.ZohoCalls object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.ZohoCalls object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.Update(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.ZohoCalls)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.ZohoCalls object to update.</param>
            <remarks>
            	After updating the datasource, the SalesWorkflow.Entities.ZohoCalls object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlZohoCallsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoCallsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlZohoCallsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.ZohoLeads"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.ZohoLeads"/> entity.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.Delete(SalesWorkflow.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_leadpk">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.Find(SalesWorkflow.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoLeads objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoLeads objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoLeads objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.GetPaged(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoLeads objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.GetByLeadid(SalesWorkflow.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the LEADIDINDEX index.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="_leadid"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SalesWorkflow.Entities.TList`1"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.GetByLeadpk(SalesWorkflow.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZohoLeads index.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="_leadpk"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SalesWorkflow.Entities.ZohoLeads"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.BulkInsert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.TList{SalesWorkflow.Entities.ZohoLeads})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.ZohoLeads object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.Insert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.ZohoLeads)">
            <summary>
            	Inserts a SalesWorkflow.Entities.ZohoLeads object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.ZohoLeads object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.ZohoLeads object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.Update(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.ZohoLeads)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.ZohoLeads object to update.</param>
            <remarks>
            	After updating the datasource, the SalesWorkflow.Entities.ZohoLeads object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlZohoLeadsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlZohoUsersProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.ZohoUsers"/> entity.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:SalesWorkflow.Entities.ZohoUsers"/> entity.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.Delete(SalesWorkflow.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_userpk">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.Find(SalesWorkflow.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoUsers objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.Find(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:SalesWorkflow.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoUsers objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.GetAll(SalesWorkflow.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoUsers objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.GetPaged(SalesWorkflow.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SalesWorkflow.Entities.ZohoUsers objects.</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.GetByUserpk(SalesWorkflow.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ZohoUsers index.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="_userpk"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:SalesWorkflow.Entities.ZohoUsers"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.BulkInsert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.TList{SalesWorkflow.Entities.ZohoUsers})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.ZohoUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.Insert(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.ZohoUsers)">
            <summary>
            	Inserts a SalesWorkflow.Entities.ZohoUsers object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.ZohoUsers object to insert.</param>
            <remarks>
            	After inserting into the datasource, the SalesWorkflow.Entities.ZohoUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.Update(SalesWorkflow.Data.TransactionManager,SalesWorkflow.Entities.ZohoUsers)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:SalesWorkflow.Data.TransactionManager"/> object</param>
            <param name="entity">SalesWorkflow.Entities.ZohoUsers object to update.</param>
            <remarks>
            	After updating the datasource, the SalesWorkflow.Entities.ZohoUsers object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlZohoUsersProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlZohoUsersProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.SqlZohoUsersProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(SalesWorkflow.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(SalesWorkflow.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(SalesWorkflow.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(SalesWorkflow.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(SalesWorkflow.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(SalesWorkflow.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(SalesWorkflow.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(SalesWorkflow.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(SalesWorkflow.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(SalesWorkflow.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(SalesWorkflow.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(SalesWorkflow.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <see cref="T:SalesWorkflow.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ZohoLeadsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.ZohoLeads"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlZohoLeadsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlZohoLeadsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.LeadContactedProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.LeadContacted"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlLeadContactedProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlLeadContactedProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ZohoCallsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.ZohoCalls"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlZohoCallsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlZohoCallsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.ZohoUsersProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.ZohoUsers"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlZohoUsersProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlZohoUsersProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.LeadHoldAndCallProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.LeadHoldAndCall"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlLeadHoldAndCallProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlLeadHoldAndCallProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwAllLeadsWithCallsAndPeriodsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwAllLeadsWithCallsAndPeriods"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwAllLeadsWithCallsAndPeriodsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwAllLeadsWithCallsAndPeriodsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwBaseLeadContactInFutureProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadContactInFuture"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadContactInFutureProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadContactInFutureProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwBaseLeadGetLessThanThreeCallsInPeriodProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetLessThanThreeCallsInPeriod"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetLessThanThreeCallsInPeriodProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwBaseLeadGetLessThanTwoCallsInPeriodProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetLessThanTwoCallsInPeriod"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetLessThanTwoCallsInPeriodProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwBaseLeadGetWithNoActivityIn60DaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetWithNoActivityIn60Days"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetWithNoActivityIn60DaysProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetWithNoActivityIn60DaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwBaseLeadGetWithNoActivityInNdaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetWithNoActivityInNdays"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetWithNoActivityInNdaysProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetWithNoActivityInNdaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwBaseLeadGetZeroCallsInPeriodProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwBaseLeadGetZeroCallsInPeriod"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetZeroCallsInPeriodProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwBaseLeadGetZeroCallsInPeriodProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwCallableLeadsWithCallsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwCallableLeadsWithCalls"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallableLeadsWithCallsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallableLeadsWithCallsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwCallableLeadsWithCallsAndHourAdjProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwCallableLeadsWithCallsAndHourAdj"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallableLeadsWithCallsAndHourAdjProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallableLeadsWithCallsAndHourAdjProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwCallableLeadsWithCallsAndPeriodProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwCallableLeadsWithCallsAndPeriod"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallableLeadsWithCallsAndPeriodProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallableLeadsWithCallsAndPeriodProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwCallableLeadsWithCallsAndPeriodsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwCallableLeadsWithCallsAndPeriods"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallableLeadsWithCallsAndPeriodsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallableLeadsWithCallsAndPeriodsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwCallsByUserProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwCallsByUser"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallsByUserProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwCallsByUserProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwDeferedLeadsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwDeferedLeads"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwDeferedLeadsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwDeferedLeadsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwHoldAndCallWithLeadInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwHoldAndCallWithLeadInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwHoldAndCallWithLeadInfoProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwHoldAndCallWithLeadInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLastCallCreatedProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLastCallCreated"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLastCallCreatedProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLastCallCreatedProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLastEmailCreatedProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLastEmailCreated"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLastEmailCreatedProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLastEmailCreatedProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadCallCountsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadCallCounts"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadCallCountsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadCallCountsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadContactToolProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadContactTool"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadContactToolProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadContactToolProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadContactToolCompleteProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadContactToolComplete"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadContactToolCompleteProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadContactToolCompleteProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadGetProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadGet"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadGetAlexProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadGetAlex"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetAlexProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetAlexProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadGetCraigProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadGetCraig"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetCraigProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetCraigProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadGetJennProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadGetJenn"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetJennProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetJennProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadGetJoEllenProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadGetJoEllen"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetJoEllenProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetJoEllenProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadGetNextProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadGetNext"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetNextProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetNextProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadGetRichardProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadGetRichard"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetRichardProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadGetRichardProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadHoldAndCallProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadHoldAndCall"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadHoldAndCallProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadHoldAndCallProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadsAndCallsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadsAndCalls"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadsAndCallsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadsAndCallsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadsWithAllStatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadsWithAllStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadsWithAllStatusProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadsWithAllStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwLeadsWithCallableStatusProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwLeadsWithCallableStatus"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadsWithCallableStatusProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwLeadsWithCallableStatusProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwManualReturnsListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwManualReturnsList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwManualReturnsListProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwManualReturnsListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwManualSalesListProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwManualSalesList"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwManualSalesListProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwManualSalesListProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwMaxLeadHoldAndCallProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwMaxLeadHoldAndCall"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwMaxLeadHoldAndCallProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwMaxLeadHoldAndCallProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwReportingLeadsAndSalesBoardProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwReportingLeadsAndSalesBoard"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwReportingLeadsAndSalesBoardProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwReportingLeadsAndSalesBoardProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwReportingSalesInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwReportingSalesInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwReportingSalesInfoProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwReportingSalesInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwReportingZohoCallsConnectedAfterDateProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwReportingZohoCallsConnectedAfterDate"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwReportingZohoCallsConnectedAfterDateProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwReportingZohoCallsConnectedAfterDateProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwSalesStatsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwSalesStats"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwSalesStatsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwSalesStatsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwZohoCallsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwZohoCalls"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoCallsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoCallsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwZohoLeadsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwZohoLeads"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwZohoLeadsNeedingActionTodayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwZohoLeadsNeedingActionToday"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsNeedingActionTodayProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsNeedingActionTodayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwZohoLeadsWithLocalTimeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwZohoLeadsWithLocalTime"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsWithLocalTimeProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsWithLocalTimeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwZohoLeadsWithLocalTimeNoActionTodayProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwZohoLeadsWithLocalTimeNoActionToday"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsWithLocalTimeNoActionTodayProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsWithLocalTimeNoActionTodayProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.VwZohoLeadsWithLocalTimeNoActionTodayCallableProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:SalesWorkflow.Entities.VwZohoLeadsWithLocalTimeNoActionTodayCallable"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProvider">
            <summary>
            Gets the current <see cref="P:SalesWorkflow.Data.SqlClient.SqlNetTiersProvider.SqlVwZohoLeadsWithLocalTimeNoActionTodayCallableProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,SalesWorkflow.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:SalesWorkflow.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:SalesWorkflow.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:SalesWorkflow.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:SalesWorkflow.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SalesWorkflow.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:SalesWorkflow.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:SalesWorkflow.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:SalesWorkflow.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:SalesWorkflow.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
    </members>
</doc>
