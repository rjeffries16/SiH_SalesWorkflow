/*
	File generated by NetTiers templates [www.nettiers.net]
	Generated on : Thursday, May 12, 2016
	Important: Do not modify this file. Edit the file VwLeadHoldAndCall.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace SalesWorkflow.Entities
{
	///<summary>
	/// An object representation of the 'vw_LeadHoldAndCall' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("VwLeadHoldAndCallBase")]
	public abstract partial class VwLeadHoldAndCallBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// LEADID : 
		/// </summary>
		private System.String		  _leadid = string.Empty;
		
		/// <summary>
		/// USER_ID : 
		/// </summary>
		private System.String		  _userId = string.Empty;
		
		/// <summary>
		/// LeadHoldAndCallPK : 
		/// </summary>
		private System.Int64		  _leadHoldAndCallPk = (long)0;
		
		/// <summary>
		/// LeadHoldDts : 
		/// </summary>
		private System.DateTime		  _leadHoldDts = DateTime.MinValue;
		
		/// <summary>
		/// LeadCalled : 
		/// </summary>
		private System.Boolean?		  _leadCalled = null;
		
		/// <summary>
		/// LeadDefered : 
		/// </summary>
		private System.Boolean?		  _leadDefered = null;
		
		/// <summary>
		/// LeadActionDts : 
		/// </summary>
		private System.DateTime?		  _leadActionDts = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VwLeadHoldAndCallBase"/> instance.
		///</summary>
		public VwLeadHoldAndCallBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="VwLeadHoldAndCallBase"/> instance.
		///</summary>
		///<param name="_leadid"></param>
		///<param name="_userId"></param>
		///<param name="_leadHoldAndCallPk"></param>
		///<param name="_leadHoldDts"></param>
		///<param name="_leadCalled"></param>
		///<param name="_leadDefered"></param>
		///<param name="_leadActionDts"></param>
		public VwLeadHoldAndCallBase(System.String _leadid, System.String _userId, System.Int64 _leadHoldAndCallPk, System.DateTime _leadHoldDts, System.Boolean? _leadCalled, System.Boolean? _leadDefered, System.DateTime? _leadActionDts)
		{
			this._leadid = _leadid;
			this._userId = _userId;
			this._leadHoldAndCallPk = _leadHoldAndCallPk;
			this._leadHoldDts = _leadHoldDts;
			this._leadCalled = _leadCalled;
			this._leadDefered = _leadDefered;
			this._leadActionDts = _leadActionDts;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="VwLeadHoldAndCall"/> instance.
		///</summary>
		///<param name="_leadid"></param>
		///<param name="_userId"></param>
		///<param name="_leadHoldAndCallPk"></param>
		///<param name="_leadHoldDts"></param>
		///<param name="_leadCalled"></param>
		///<param name="_leadDefered"></param>
		///<param name="_leadActionDts"></param>
		public static VwLeadHoldAndCall CreateVwLeadHoldAndCall(System.String _leadid, System.String _userId, System.Int64 _leadHoldAndCallPk, System.DateTime _leadHoldDts, System.Boolean? _leadCalled, System.Boolean? _leadDefered, System.DateTime? _leadActionDts)
		{
			VwLeadHoldAndCall newVwLeadHoldAndCall = new VwLeadHoldAndCall();
			newVwLeadHoldAndCall.Leadid = _leadid;
			newVwLeadHoldAndCall.UserId = _userId;
			newVwLeadHoldAndCall.LeadHoldAndCallPk = _leadHoldAndCallPk;
			newVwLeadHoldAndCall.LeadHoldDts = _leadHoldDts;
			newVwLeadHoldAndCall.LeadCalled = _leadCalled;
			newVwLeadHoldAndCall.LeadDefered = _leadDefered;
			newVwLeadHoldAndCall.LeadActionDts = _leadActionDts;
			return newVwLeadHoldAndCall;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the LEADID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Leadid
		{
			get
			{
				return this._leadid; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Leadid does not allow null values.");
				if (_leadid == value)
					return;
					
				this._leadid = value;
				this._isDirty = true;
				
				OnPropertyChanged("Leadid");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the USER_ID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UserId
		{
			get
			{
				return this._userId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "UserId does not allow null values.");
				if (_userId == value)
					return;
					
				this._userId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LeadHoldAndCallPK property. 
		///		
		/// </summary>
		/// <value>This type is bigint</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int64 LeadHoldAndCallPk
		{
			get
			{
				return this._leadHoldAndCallPk; 
			}
			set
			{
				if (_leadHoldAndCallPk == value)
					return;
					
				this._leadHoldAndCallPk = value;
				this._isDirty = true;
				
				OnPropertyChanged("LeadHoldAndCallPk");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LeadHoldDts property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime LeadHoldDts
		{
			get
			{
				return this._leadHoldDts; 
			}
			set
			{
				if (_leadHoldDts == value)
					return;
					
				this._leadHoldDts = value;
				this._isDirty = true;
				
				OnPropertyChanged("LeadHoldDts");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LeadCalled property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsLeadCalledNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? LeadCalled
		{
			get
			{
				return this._leadCalled; 
			}
			set
			{
				if (_leadCalled == value && LeadCalled != null )
					return;
					
				this._leadCalled = value;
				this._isDirty = true;
				
				OnPropertyChanged("LeadCalled");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LeadDefered property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsLeadDeferedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? LeadDefered
		{
			get
			{
				return this._leadDefered; 
			}
			set
			{
				if (_leadDefered == value && LeadDefered != null )
					return;
					
				this._leadDefered = value;
				this._isDirty = true;
				
				OnPropertyChanged("LeadDefered");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LeadActionDts property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLeadActionDtsNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? LeadActionDts
		{
			get
			{
				return this._leadActionDts; 
			}
			set
			{
				if (_leadActionDts == value && LeadActionDts != null )
					return;
					
				this._leadActionDts = value;
				this._isDirty = true;
				
				OnPropertyChanged("LeadActionDts");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vw_LeadHoldAndCall"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed VwLeadHoldAndCallBase Entity 
		///</summary>
		public virtual VwLeadHoldAndCallBase Copy()
		{
			//shallow copy entity
			VwLeadHoldAndCall copy = new VwLeadHoldAndCall();
				copy.Leadid = this.Leadid;
				copy.UserId = this.UserId;
				copy.LeadHoldAndCallPk = this.LeadHoldAndCallPk;
				copy.LeadHoldDts = this.LeadHoldDts;
				copy.LeadCalled = this.LeadCalled;
				copy.LeadDefered = this.LeadDefered;
				copy.LeadActionDts = this.LeadActionDts;
			copy.AcceptChanges();
			return (VwLeadHoldAndCall)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VwLeadHoldAndCallBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VwLeadHoldAndCallBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="VwLeadHoldAndCallBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="VwLeadHoldAndCallBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VwLeadHoldAndCallBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(VwLeadHoldAndCallBase Object1, VwLeadHoldAndCallBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.Leadid != Object2.Leadid)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.LeadHoldAndCallPk != Object2.LeadHoldAndCallPk)
				equal = false;
			if (Object1.LeadHoldDts != Object2.LeadHoldDts)
				equal = false;
			if (Object1.LeadCalled != null && Object2.LeadCalled != null )
			{
				if (Object1.LeadCalled != Object2.LeadCalled)
					equal = false;
			}
			else if (Object1.LeadCalled == null ^ Object1.LeadCalled == null )
			{
				equal = false;
			}
			if (Object1.LeadDefered != null && Object2.LeadDefered != null )
			{
				if (Object1.LeadDefered != Object2.LeadDefered)
					equal = false;
			}
			else if (Object1.LeadDefered == null ^ Object1.LeadDefered == null )
			{
				equal = false;
			}
			if (Object1.LeadActionDts != null && Object2.LeadActionDts != null )
			{
				if (Object1.LeadActionDts != Object2.LeadActionDts)
					equal = false;
			}
			else if (Object1.LeadActionDts == null ^ Object1.LeadActionDts == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(VwLeadHoldAndCall entity, string propertyName)
		{
			switch (propertyName)
			{
				case "Leadid":
					return entity.Leadid;
				case "UserId":
					return entity.UserId;
				case "LeadHoldAndCallPk":
					return entity.LeadHoldAndCallPk;
				case "LeadHoldDts":
					return entity.LeadHoldDts;
				case "LeadCalled":
					return entity.LeadCalled;
				case "LeadDefered":
					return entity.LeadDefered;
				case "LeadActionDts":
					return entity.LeadActionDts;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as VwLeadHoldAndCall, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- Leadid: {0}{7}- UserId: {1}{7}- LeadHoldAndCallPk: {2}{7}- LeadHoldDts: {3}{7}- LeadCalled: {4}{7}- LeadDefered: {5}{7}- LeadActionDts: {6}{7}", 
				this.Leadid,
				this.UserId,
				this.LeadHoldAndCallPk,
				this.LeadHoldDts,
				(this.LeadCalled == null) ? string.Empty : this.LeadCalled.ToString(),
			     
				(this.LeadDefered == null) ? string.Empty : this.LeadDefered.ToString(),
			     
				(this.LeadActionDts == null) ? string.Empty : this.LeadActionDts.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the VwLeadHoldAndCall columns.
	/// </summary>
	[Serializable]
	public enum VwLeadHoldAndCallColumn
	{
		/// <summary>
		/// LEADID : 
		/// </summary>
		[EnumTextValue("LEADID")]
		[ColumnEnum("LEADID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Leadid,
		/// <summary>
		/// USER_ID : 
		/// </summary>
		[EnumTextValue("USER_ID")]
		[ColumnEnum("USER_ID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		UserId,
		/// <summary>
		/// LeadHoldAndCallPK : 
		/// </summary>
		[EnumTextValue("LeadHoldAndCallPK")]
		[ColumnEnum("LeadHoldAndCallPK", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		LeadHoldAndCallPk,
		/// <summary>
		/// LeadHoldDts : 
		/// </summary>
		[EnumTextValue("LeadHoldDts")]
		[ColumnEnum("LeadHoldDts", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LeadHoldDts,
		/// <summary>
		/// LeadCalled : 
		/// </summary>
		[EnumTextValue("LeadCalled")]
		[ColumnEnum("LeadCalled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		LeadCalled,
		/// <summary>
		/// LeadDefered : 
		/// </summary>
		[EnumTextValue("LeadDefered")]
		[ColumnEnum("LeadDefered", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		LeadDefered,
		/// <summary>
		/// LeadActionDts : 
		/// </summary>
		[EnumTextValue("LeadActionDts")]
		[ColumnEnum("LeadActionDts", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LeadActionDts
	}//End enum

} // end namespace
